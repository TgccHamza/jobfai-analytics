package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"
	"jobfai-analytics/internal/graph"
	"jobfai-analytics/internal/graph/model"
	"jobfai-analytics/internal/models"
	"strconv"
)

// GetGames is the resolver for the getGames field.
func (r *queryResolver) GetGames(ctx context.Context) ([]*models.Game, error) {
	games, err := r.GameService.GetAllGames()
	if err != nil {
		return nil, fmt.Errorf("error fetching games: %w", err)
	}

	// Convert []models.Game to []*models.Game
	result := make([]*models.Game, len(games))
	for i := range games {
		result[i] = &games[i]
	}

	return result, nil
}

// GetGameByID is the resolver for the getGameById field.
func (r *queryResolver) GetGameByID(ctx context.Context, gameID string) (*models.Game, error) {
	game, err := r.GameService.GetGameByID(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching game: %w", err)
	}

	if game == nil {
		return nil, fmt.Errorf("game not found with ID: %s", gameID)
	}

	return game, nil
}

// GetCompetenciesByGame is the resolver for the getCompetenciesByGame field.
func (r *queryResolver) GetCompetenciesByGame(ctx context.Context, gameID string) ([]*models.Competence, error) {
	competencies, err := r.GameService.GetGameCompetencies(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching competencies: %w", err)
	}

	// Convert []models.Competence to []*models.Competence
	result := make([]*models.Competence, len(competencies))
	for i := range competencies {
		result[i] = &competencies[i]
	}

	return result, nil
}

// GetCompetenceByID is the resolver for the getCompetenceById field.
func (r *queryResolver) GetCompetenceByID(ctx context.Context, competenceID string) (*models.Competence, error) {
	id, err := strconv.Atoi(competenceID)
	if err != nil {
		return nil, fmt.Errorf("invalid competence ID format: %w", err)
	}

	competence, err := r.CompetenceService.GetCompetenceByID(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching competence: %w", err)
	}

	if competence == nil {
		return nil, fmt.Errorf("competence not found with ID: %s", competenceID)
	}

	return competence, nil
}

// GetMetricsByCompetence is the resolver for the getMetricsByCompetence field.
func (r *queryResolver) GetMetricsByCompetence(ctx context.Context, competenceID string) ([]*models.Metric, error) {
	id, err := strconv.Atoi(competenceID)
	if err != nil {
		return nil, fmt.Errorf("invalid competence ID format: %w", err)
	}

	metrics, err := r.CompetenceService.GetCompetenceMetrics(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching metrics: %w", err)
	}

	// Convert []models.Metric to []*models.Metric
	result := make([]*models.Metric, len(metrics))
	for i := range metrics {
		result[i] = &metrics[i]
	}

	return result, nil
}

// GetMetricByID is the resolver for the getMetricById field.
func (r *queryResolver) GetMetricByID(ctx context.Context, metricID string) (*models.Metric, error) {
	id, err := strconv.Atoi(metricID)
	if err != nil {
		return nil, fmt.Errorf("invalid metric ID format: %w", err)
	}

	metric, err := r.MetricService.GetCompetenceMetricByID(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching metric: %w", err)
	}

	if metric == nil {
		return nil, fmt.Errorf("metric not found with ID: %s", metricID)
	}

	return metric, nil
}

// GetParametersByMetric is the resolver for the getParametersByMetric field.
func (r *queryResolver) GetParametersByMetric(ctx context.Context, metricID string) ([]*models.MetricParameter, error) {
	id, err := strconv.Atoi(metricID)
	if err != nil {
		return nil, fmt.Errorf("invalid metric ID format: %w", err)
	}

	parameters, err := r.MetricService.GetCompetenceMetricParameters(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching parameters: %w", err)
	}

	// Convert []models.MetricParameter to []*model.MetricParameter
	result := make([]*models.MetricParameter, len(parameters))
	for i, param := range parameters {
		result[i] = &models.MetricParameter{
			ParamID:     param.ParamID,
			MetricID:    param.MetricID,
			ParamName:   param.ParamName,
			ParamKey:    param.ParamKey,
			Description: param.Description,
			ParamType:   param.ParamType,
			IsRequired:  param.IsRequired,
		}
	}

	return result, nil
}

// GetStagesByGame is the resolver for the getStagesByGame field.
func (r *queryResolver) GetStagesByGame(ctx context.Context, gameID string) ([]*models.Stage, error) {
	stages, err := r.GameService.GetGameStages(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching stages: %w", err)
	}

	// Convert []models.Stage to []*models.Stage
	result := make([]*models.Stage, len(stages))
	for i := range stages {
		result[i] = &stages[i]
	}

	return result, nil
}

// GetStageByID is the resolver for the getStageById field.
func (r *queryResolver) GetStageByID(ctx context.Context, stageID string) (*models.Stage, error) {
	id, err := strconv.Atoi(stageID)
	if err != nil {
		return nil, fmt.Errorf("invalid stage ID format: %w", err)
	}

	stage, err := r.StageService.GetStageByID(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching stage: %w", err)
	}

	if stage == nil {
		return nil, fmt.Errorf("stage not found with ID: %s", stageID)
	}

	return stage, nil
}

// GetMetricsByStage is the resolver for the getMetricsByStage field.
func (r *queryResolver) GetMetricsByStage(ctx context.Context, stageID string) ([]*models.Metric, error) {
	id, err := strconv.Atoi(stageID)
	if err != nil {
		return nil, fmt.Errorf("invalid stage ID format: %w", err)
	}

	metrics, err := r.StageService.GetStageMetrics(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching metrics: %w", err)
	}

	// Convert []models.Metric to []*models.Metric
	result := make([]*models.Metric, len(metrics))
	for i := range metrics {
		result[i] = &metrics[i]
	}

	return result, nil
}

// GetGameMetricsByGame is the resolver for the getGameMetricsByGame field.
func (r *queryResolver) GetGameMetricsByGame(ctx context.Context, gameID string) ([]*model.GameMetric, error) {
	metrics, err := r.MetricService.GetGameMetricsByGame(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching game metrics: %w", err)
	}

	// Convert []models.Metric to []*model.GameMetric
	result := make([]*model.GameMetric, len(metrics))
	for i, metric := range metrics {
		// Convert models.Metric to model.GameMetric
		var benchmarkStr *string
		str := strconv.FormatFloat(metric.Benchmark, 'f', -1, 64)
		benchmarkStr = &str

		result[i] = &model.GameMetric{
			MetricID:          strconv.Itoa(metric.MetricID),
			GameID:            &metric.GameID,
			MetricKey:         &metric.MetricKey,
			MetricName:        &metric.MetricName,
			MetricDescription: &metric.MetricDescription,
			Benchmark:         benchmarkStr,
			Formula:           &metric.Formula,
			Description:       &metric.MetricDescription,
		}
	}

	return result, nil
}

// GetGameMetricByID is the resolver for the getGameMetricById field.
func (r *queryResolver) GetGameMetricByID(ctx context.Context, metricID string) (*model.GameMetric, error) {
	id, err := strconv.Atoi(metricID)
	if err != nil {
		return nil, fmt.Errorf("invalid game metric ID format: %w", err)
	}

	metric, err := r.MetricService.GetGameMetricByID(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching game metric: %w", err)
	}

	if metric == nil {
		return nil, fmt.Errorf("game metric not found with ID: %s", metricID)
	}

	// Convert models.Metric to model.GameMetric
	var benchmarkStr *string
	str := strconv.FormatFloat(metric.Benchmark, 'f', -1, 64)
	benchmarkStr = &str

	result := &model.GameMetric{
		MetricID:          metricID,
		GameID:            &metric.GameID,
		MetricKey:         &metric.MetricKey,
		MetricName:        &metric.MetricName,
		MetricDescription: &metric.MetricDescription,
		Benchmark:         benchmarkStr,
		Formula:           &metric.Formula,
		Description:       &metric.MetricDescription, // Also fixed: was using MetricDescription instead of Description
	}

	return result, nil
}

// GetParametersByGameMetric is the resolver for the getParametersByGameMetric field.
func (r *queryResolver) GetParametersByGameMetric(ctx context.Context, metricID string) ([]*model.GameMetricParameter, error) {
	id, err := strconv.Atoi(metricID)
	if err != nil {
		return nil, fmt.Errorf("invalid game metric ID format: %w", err)
	}

	parameters, err := r.MetricService.GetGameMetricParameters(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching game metric parameters: %w", err)
	}

	// Convert []models.MetricParameter to []*model.GameMetricParameter
	result := make([]*model.GameMetricParameter, len(parameters))
	for i, param := range parameters {
		result[i] = &model.GameMetricParameter{
			ParamID:          strconv.Itoa(param.ParamID),
			MetricID:         &metricID,
			ParamKey:         &param.ParamKey,
			ParamName:        &param.ParamName,
			ParamDescription: &param.ParamDescription,
			ParamType:        &param.ParamType,
			IsRequired:       &param.IsRequired,
			DefaultValue:     &param.DefaultValue,
			Description:      &param.Description,
		}
	}

	return result, nil
}

// GetConstantsByGame is the resolver for the getConstantsByGame field.
func (r *queryResolver) GetConstantsByGame(ctx context.Context, gameID string) ([]*models.ConstantParameter, error) {
	constants, err := r.MetricService.GetConstantParametersByGame(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching constants: %w", err)
	}

	// Convert []models.ConstantParameter to []*models.ConstantParameter
	result := make([]*models.ConstantParameter, len(constants))
	for i := range constants {
		result[i] = &constants[i]
	}

	return result, nil
}

// GetConstantByID is the resolver for the getConstantById field.
func (r *queryResolver) GetConstantByID(ctx context.Context, constID string) (*models.ConstantParameter, error) {
	id, err := strconv.Atoi(constID)
	if err != nil {
		return nil, fmt.Errorf("invalid constant ID format: %w", err)
	}

	constant, err := r.MetricService.GetConstantParameterByID(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching constant: %w", err)
	}

	if constant == nil {
		return nil, fmt.Errorf("constant not found with ID: %s", constID)
	}

	return constant, nil
}

// GetGameConfiguration is the resolver for the getGameConfiguration field.
func (r *queryResolver) GetGameConfiguration(ctx context.Context, gameID string) (*models.Game, error) {
	game, err := r.GameService.GetGameByID(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching game configuration: %w", err)
	}

	if game == nil {
		return nil, fmt.Errorf("game not found with ID: %s", gameID)
	}

	return game, nil
}

// GetRequiredParametersForGame is the resolver for the getRequiredParametersForGame field.
func (r *queryResolver) GetRequiredParametersForGame(ctx context.Context, gameID string) ([]*models.Stage, error) {
	// stages, err := r.StageService.GetRequiredParametersForStage(gameID)
	// if err != nil {
	// 	return nil, fmt.Errorf("error fetching required parameters: %w", err)
	// }

	// // Convert []models.Stage to []*models.Stage
	// result := make([]*models.Stage, len(stages))
	// for i := range stages {
	// 	result[i] = &stages[i]
	// }

	return nil, nil
}

// GetRequiredParametersForStage is the resolver for the getRequiredParametersForStage field.
func (r *queryResolver) GetRequiredParametersForStage(ctx context.Context, stageID string) ([]*models.MetricParameter, error) {
	id, err := strconv.Atoi(stageID)
	if err != nil {
		return nil, fmt.Errorf("invalid stage ID format: %w", err)
	}

	parameters, err := r.StageService.GetRequiredParametersForStage(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching required parameters: %w", err)
	}

	// Convert []models.MetricParameter to []*model.MetricParameter

	// Convert []models.MetricParameter to []*model.MetricParameter
	result := make([]*models.MetricParameter, len(parameters))
	for i, param := range parameters {
		result[i] = &models.MetricParameter{
			ParamID:     param.ParamID,
			MetricID:    param.MetricID,
			ParamName:   param.ParamName,
			ParamKey:    param.ParamKey,
			Description: param.Description,
			ParamType:   param.ParamType,
			IsRequired:  param.IsRequired,
		}
	}

	return result, nil
}

// GetGameFormulas is the resolver for the getGameFormulas field.
func (r *queryResolver) GetGameFormulas(ctx context.Context, gameID string) (*models.Game, error) {
	// This is similar to GetGameConfiguration but might focus on formula-related data
	game, err := r.GameService.GetGameByID(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching game formulas: %w", err)
	}

	if game == nil {
		return nil, fmt.Errorf("game not found with ID: %s", gameID)
	}

	return game, nil
}

// GetBenchmarkData is the resolver for the getBenchmarkData field.
func (r *queryResolver) GetBenchmarkData(ctx context.Context, gameID string) (*models.Game, error) {
	// This is similar to GetGameConfiguration but might focus on benchmark-related data
	game, err := r.GameService.GetGameByID(gameID)
	if err != nil {
		return nil, fmt.Errorf("error fetching benchmark data: %w", err)
	}

	if game == nil {
		return nil, fmt.Errorf("game not found with ID: %s", gameID)
	}

	return game, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
