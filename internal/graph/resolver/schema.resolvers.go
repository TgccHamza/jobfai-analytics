package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"jobfai-analytics/internal/graph"
	"jobfai-analytics/internal/graph/model"
	"jobfai-analytics/internal/models"
	"strconv"
	"time"
)

// CreatedAt is the resolver for the createdAt field.
func (r *competenceResolver) CreatedAt(ctx context.Context, obj *models.Competence) (*string, error) {
	timeStr := obj.CreatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *competenceResolver) UpdatedAt(ctx context.Context, obj *models.Competence) (*string, error) {
	timeStr := obj.UpdatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *competenceMetricResolver) CreatedAt(ctx context.Context, obj *models.CompetenceMetric) (*string, error) {
	timeStr := obj.CreatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *competenceMetricResolver) UpdatedAt(ctx context.Context, obj *models.CompetenceMetric) (*string, error) {
	timeStr := obj.UpdatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// Parameters is the resolver for the parameters field.
func (r *competenceMetricResolver) Parameters(ctx context.Context, obj *models.CompetenceMetric) ([]*model.MetricParameter, error) {
	// Use the MetricService to get parameters
	competenceMetricParams, err := r.MetricService.GetCompetenceMetricParameters(obj.MetricID)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	var params []*model.MetricParameter
	for _, param := range competenceMetricParams {
		// Convert int to string and then get a pointer to it
		paramIDStr := strconv.Itoa(param.ParamID)
		metricIDStr := strconv.Itoa(param.MetricID)

		params = append(params, &model.MetricParameter{
			MetricID:         &metricIDStr,
			ParamName:        &param.ParamName,
			Description:      &param.Description,
			ParamType:        &param.ParamType,
			IsRequired:       &param.IsRequired,
			DefaultValue:     &param.DefaultValue,
			Metric:           obj,
			ParamID:          paramIDStr,
			ParamDescription: &param.Description,
		})
	}

	return params, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *constantParameterResolver) CreatedAt(ctx context.Context, obj *models.ConstantParameter) (*string, error) {
	timeStr := obj.CreatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *constantParameterResolver) UpdatedAt(ctx context.Context, obj *models.ConstantParameter) (*string, error) {
	timeStr := obj.UpdatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *gameResolver) CreatedAt(ctx context.Context, obj *models.Game) (*string, error) {
	timeStr := obj.CreatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *gameResolver) UpdatedAt(ctx context.Context, obj *models.Game) (*string, error) {
	timeStr := obj.UpdatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *gameMetricResolver) CreatedAt(ctx context.Context, obj *models.GameMetric) (*string, error) {
	timeStr := obj.CreatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *gameMetricResolver) UpdatedAt(ctx context.Context, obj *models.GameMetric) (*string, error) {
	timeStr := obj.UpdatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *gameMetricParameterResolver) CreatedAt(ctx context.Context, obj *models.GameMetricParameter) (*string, error) {
	timeStr := obj.CreatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *gameMetricParameterResolver) UpdatedAt(ctx context.Context, obj *models.GameMetricParameter) (*string, error) {
	timeStr := obj.UpdatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// StageOrder is the resolver for the stageOrder field.
func (r *stageResolver) StageOrder(ctx context.Context, obj *models.Stage) (*int32, error) {
	order := int32(obj.StageOrder)
	return &order, nil
}

// OptimalTime is the resolver for the optimalTime field.
func (r *stageResolver) OptimalTime(ctx context.Context, obj *models.Stage) (*int32, error) {
	if obj.OptimalTime == 0 {
		return nil, nil
	}
	optimalTime := int32(obj.OptimalTime)
	return &optimalTime, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *stageResolver) CreatedAt(ctx context.Context, obj *models.Stage) (*string, error) {
	timeStr := obj.CreatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *stageResolver) UpdatedAt(ctx context.Context, obj *models.Stage) (*string, error) {
	timeStr := obj.UpdatedAt.Format(time.RFC3339)
	return &timeStr, nil
}

// Competence returns graph.CompetenceResolver implementation.
func (r *Resolver) Competence() graph.CompetenceResolver { return &competenceResolver{r} }

// CompetenceMetric returns graph.CompetenceMetricResolver implementation.
func (r *Resolver) CompetenceMetric() graph.CompetenceMetricResolver {
	return &competenceMetricResolver{r}
}

// ConstantParameter returns graph.ConstantParameterResolver implementation.
func (r *Resolver) ConstantParameter() graph.ConstantParameterResolver {
	return &constantParameterResolver{r}
}

// Game returns graph.GameResolver implementation.
func (r *Resolver) Game() graph.GameResolver { return &gameResolver{r} }

// GameMetric returns graph.GameMetricResolver implementation.
func (r *Resolver) GameMetric() graph.GameMetricResolver { return &gameMetricResolver{r} }

// GameMetricParameter returns graph.GameMetricParameterResolver implementation.
func (r *Resolver) GameMetricParameter() graph.GameMetricParameterResolver {
	return &gameMetricParameterResolver{r}
}

// Stage returns graph.StageResolver implementation.
func (r *Resolver) Stage() graph.StageResolver { return &stageResolver{r} }

type competenceResolver struct{ *Resolver }
type competenceMetricResolver struct{ *Resolver }
type constantParameterResolver struct{ *Resolver }
type gameResolver struct{ *Resolver }
type gameMetricResolver struct{ *Resolver }
type gameMetricParameterResolver struct{ *Resolver }
type stageResolver struct{ *Resolver }
