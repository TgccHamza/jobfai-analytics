// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"jobfai-analytics/internal/models"
)

type BenchmarkComparison struct {
	PercentileRank      *int32   `json:"percentileRank,omitempty"`
	RelativeToBenchmark *string  `json:"relativeToBenchmark,omitempty"`
	BenchmarkScore      *float64 `json:"benchmarkScore,omitempty"`
}

type CompetenceDetail struct {
	CompetenceKey string          `json:"competenceKey"`
	Name          *string         `json:"name,omitempty"`
	Score         *float64        `json:"score,omitempty"`
	Benchmark     *float64        `json:"benchmark,omitempty"`
	Weight        *float64        `json:"weight,omitempty"`
	Metrics       []*MetricResult `json:"metrics,omitempty"`
}

type CompetenceInput struct {
	GameID         string   `json:"gameId"`
	CompetenceKey  string   `json:"competenceKey"`
	CompetenceName string   `json:"competenceName"`
	Benchmark      *float64 `json:"benchmark,omitempty"`
	Description    *string  `json:"description,omitempty"`
	Weight         *float64 `json:"weight,omitempty"`
}

type CompetenceMetricInput struct {
	CompetenceID      string   `json:"competenceId"`
	MetricKey         string   `json:"metricKey"`
	MetricName        string   `json:"metricName"`
	MetricDescription *string  `json:"metricDescription,omitempty"`
	Benchmark         *float64 `json:"benchmark,omitempty"`
	Formula           string   `json:"formula"`
	Weight            *float64 `json:"weight,omitempty"`
}

type CompetenceMetricUpdateInput struct {
	MetricID          string   `json:"metricId"`
	MetricKey         *string  `json:"metricKey,omitempty"`
	MetricName        *string  `json:"metricName,omitempty"`
	MetricDescription *string  `json:"metricDescription,omitempty"`
	Benchmark         *float64 `json:"benchmark,omitempty"`
	Formula           *string  `json:"formula,omitempty"`
	Weight            *float64 `json:"weight,omitempty"`
}

type CompetenceUpdateInput struct {
	CompetenceID   string   `json:"competenceId"`
	CompetenceKey  *string  `json:"competenceKey,omitempty"`
	CompetenceName *string  `json:"competenceName,omitempty"`
	Benchmark      *float64 `json:"benchmark,omitempty"`
	Description    *string  `json:"description,omitempty"`
	Weight         *float64 `json:"weight,omitempty"`
}

type ConstantParameterInput struct {
	GameID           string  `json:"gameId"`
	ConstKey         string  `json:"constKey"`
	ConstName        string  `json:"constName"`
	ConstDescription *string `json:"constDescription,omitempty"`
	ConstValue       float64 `json:"constValue"`
	Description      *string `json:"description,omitempty"`
}

type ConstantParameterUpdateInput struct {
	ConstID          string   `json:"constId"`
	ConstKey         *string  `json:"constKey,omitempty"`
	ConstName        *string  `json:"constName,omitempty"`
	ConstDescription *string  `json:"constDescription,omitempty"`
	ConstValue       *float64 `json:"constValue,omitempty"`
	Description      *string  `json:"description,omitempty"`
}

type GameInput struct {
	GameName    string  `json:"gameName"`
	Description *string `json:"description,omitempty"`
	Active      *bool   `json:"active,omitempty"`
}

type GameMetricInput struct {
	GameID            string  `json:"gameId"`
	MetricKey         string  `json:"metricKey"`
	MetricName        string  `json:"metricName"`
	MetricDescription *string `json:"metricDescription,omitempty"`
	Benchmark         *string `json:"benchmark,omitempty"`
	Formula           string  `json:"formula"`
	Description       *string `json:"description,omitempty"`
}

type GameMetricParameterInput struct {
	MetricID         string               `json:"metricId"`
	ParamKey         string               `json:"paramKey"`
	ParamName        string               `json:"paramName"`
	ParamDescription *string              `json:"paramDescription,omitempty"`
	ParamType        models.ParameterType `json:"paramType"`
	IsRequired       *bool                `json:"isRequired,omitempty"`
	DefaultValue     *string              `json:"defaultValue,omitempty"`
	Description      *string              `json:"description,omitempty"`
}

type GameMetricParameterUpdateInput struct {
	ParamID          string                `json:"paramId"`
	ParamKey         *string               `json:"paramKey,omitempty"`
	ParamName        *string               `json:"paramName,omitempty"`
	ParamDescription *string               `json:"paramDescription,omitempty"`
	ParamType        *models.ParameterType `json:"paramType,omitempty"`
	IsRequired       *bool                 `json:"isRequired,omitempty"`
	DefaultValue     *string               `json:"defaultValue,omitempty"`
	Description      *string               `json:"description,omitempty"`
}

type GameMetricUpdateInput struct {
	MetricID          string  `json:"metricId"`
	MetricKey         *string `json:"metricKey,omitempty"`
	MetricName        *string `json:"metricName,omitempty"`
	MetricDescription *string `json:"metricDescription,omitempty"`
	Benchmark         *string `json:"benchmark,omitempty"`
	Formula           *string `json:"formula,omitempty"`
	Description       *string `json:"description,omitempty"`
}

type GameUpdateInput struct {
	GameID      string  `json:"gameId"`
	GameName    *string `json:"gameName,omitempty"`
	Description *string `json:"description,omitempty"`
	Active      *bool   `json:"active,omitempty"`
}

type GlobalMetricResult struct {
	Value   *float64 `json:"value,omitempty"`
	Formula *string  `json:"formula,omitempty"`
}

type GlobalMetrics struct {
	TimeEfficiency    *GlobalMetricResult `json:"timeEfficiency,omitempty"`
	Autonomy          *GlobalMetricResult `json:"autonomy,omitempty"`
	ErrorRecovery     *GlobalMetricResult `json:"errorRecovery,omitempty"`
	StressPerformance *GlobalMetricResult `json:"stressPerformance,omitempty"`
	Consistency       *GlobalMetricResult `json:"consistency,omitempty"`
	Adaptability      *GlobalMetricResult `json:"adaptability,omitempty"`
}

type MetricParameter struct {
	ParamID          string                   `json:"paramId"`
	MetricID         *string                  `json:"metricId,omitempty"`
	ParamKey         *string                  `json:"paramKey,omitempty"`
	ParamName        *string                  `json:"paramName,omitempty"`
	ParamDescription *string                  `json:"paramDescription,omitempty"`
	ParamType        *models.ParameterType    `json:"paramType,omitempty"`
	IsRequired       *bool                    `json:"isRequired,omitempty"`
	DefaultValue     *string                  `json:"defaultValue,omitempty"`
	Description      *string                  `json:"description,omitempty"`
	CreatedAt        *string                  `json:"createdAt,omitempty"`
	UpdatedAt        *string                  `json:"updatedAt,omitempty"`
	Metric           *models.CompetenceMetric `json:"metric,omitempty"`
}

type MetricParameterInput struct {
	MetricID         string               `json:"metricId"`
	ParamKey         string               `json:"paramKey"`
	ParamName        string               `json:"paramName"`
	ParamDescription *string              `json:"paramDescription,omitempty"`
	ParamType        models.ParameterType `json:"paramType"`
	IsRequired       *bool                `json:"isRequired,omitempty"`
	DefaultValue     *string              `json:"defaultValue,omitempty"`
	Description      *string              `json:"description,omitempty"`
}

type MetricParameterUpdateInput struct {
	ParamID          string                `json:"paramId"`
	ParamKey         *string               `json:"paramKey,omitempty"`
	ParamName        *string               `json:"paramName,omitempty"`
	ParamDescription *string               `json:"paramDescription,omitempty"`
	ParamType        *models.ParameterType `json:"paramType,omitempty"`
	IsRequired       *bool                 `json:"isRequired,omitempty"`
	DefaultValue     *string               `json:"defaultValue,omitempty"`
	Description      *string               `json:"description,omitempty"`
}

type MetricResult struct {
	KpiID     string   `json:"kpiId"`
	KpiName   *string  `json:"kpiName,omitempty"`
	Value     *float64 `json:"value,omitempty"`
	Benchmark *float64 `json:"benchmark,omitempty"`
}

type Mutation struct {
}

type ParameterValueInput struct {
	ParamID string `json:"paramId"`
	Value   string `json:"value"`
}

type PlayerPerformance struct {
	PlayerID            string               `json:"playerId"`
	PlayerName          *string              `json:"playerName,omitempty"`
	ProfileType         *string              `json:"profileType,omitempty"`
	GameDate            *string              `json:"gameDate,omitempty"`
	GameID              string               `json:"gameId"`
	TotalScore          *float64             `json:"totalScore,omitempty"`
	TotalTimeTaken      *float64             `json:"totalTimeTaken,omitempty"`
	CompetenceDetails   []*CompetenceDetail  `json:"competenceDetails,omitempty"`
	StagePerformance    []*StagePerformance  `json:"stagePerformance,omitempty"`
	GlobalMetrics       *GlobalMetrics       `json:"globalMetrics,omitempty"`
	BenchmarkComparison *BenchmarkComparison `json:"benchmarkComparison,omitempty"`
}

type PlayerPerformanceInput struct {
	PlayerID        string                  `json:"playerId"`
	PlayerName      string                  `json:"playerName"`
	ProfileType     *string                 `json:"profileType,omitempty"`
	GameID          string                  `json:"gameId"`
	StageParameters []*StageParametersInput `json:"stageParameters"`
}

type Query struct {
}

type StageInput struct {
	GameID      string   `json:"gameId"`
	StageKey    string   `json:"stageKey"`
	StageName   string   `json:"stageName"`
	StageOrder  int32    `json:"stageOrder"`
	Benchmark   *float64 `json:"benchmark,omitempty"`
	Description *string  `json:"description,omitempty"`
	OptimalTime *int32   `json:"optimalTime,omitempty"`
}

type StageMetricInput struct {
	StageID      string `json:"stageId"`
	MetricID     string `json:"metricId"`
	CompetenceID string `json:"competenceId"`
}

type StageMetricResult struct {
	KpiID     string   `json:"kpiId"`
	KpiName   *string  `json:"kpiName,omitempty"`
	Category  *string  `json:"category,omitempty"`
	Value     *float64 `json:"value,omitempty"`
	Benchmark *float64 `json:"benchmark,omitempty"`
	Formula   *string  `json:"formula,omitempty"`
	RawData   *string  `json:"rawData,omitempty"`
}

type StageParametersInput struct {
	StageID    string                 `json:"stageId"`
	Parameters []*ParameterValueInput `json:"parameters"`
	TimeTaken  float64                `json:"timeTaken"`
}

type StagePerformance struct {
	StageID          string               `json:"stageId"`
	StageName        *string              `json:"stageName,omitempty"`
	Metrics          []*StageMetricResult `json:"metrics,omitempty"`
	TimeTaken        *float64             `json:"timeTaken,omitempty"`
	OptimalTime      *float64             `json:"optimalTime,omitempty"`
	Score            *float64             `json:"score,omitempty"`
	Benchmark        *float64             `json:"benchmark,omitempty"`
	CompletionStatus *string              `json:"completionStatus,omitempty"`
}

type StageUpdateInput struct {
	StageID     string   `json:"stageId"`
	StageKey    *string  `json:"stageKey,omitempty"`
	StageName   *string  `json:"stageName,omitempty"`
	StageOrder  *int32   `json:"stageOrder,omitempty"`
	Benchmark   *float64 `json:"benchmark,omitempty"`
	Description *string  `json:"description,omitempty"`
	OptimalTime *int32   `json:"optimalTime,omitempty"`
}
