// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"jobfai-analytics/internal/graph/model"
	"jobfai-analytics/internal/models"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Competence() CompetenceResolver
	CompetenceMetric() CompetenceMetricResolver
	ConstantParameter() ConstantParameterResolver
	Game() GameResolver
	GameMetric() GameMetricResolver
	GameMetricParameter() GameMetricParameterResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Stage() StageResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	BenchmarkComparison struct {
		BenchmarkScore      func(childComplexity int) int
		PercentileRank      func(childComplexity int) int
		RelativeToBenchmark func(childComplexity int) int
	}

	Competence struct {
		Benchmark      func(childComplexity int) int
		CompetenceID   func(childComplexity int) int
		CompetenceKey  func(childComplexity int) int
		CompetenceName func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Description    func(childComplexity int) int
		Game           func(childComplexity int) int
		GameID         func(childComplexity int) int
		Metrics        func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		Weight         func(childComplexity int) int
	}

	CompetenceDetail struct {
		Benchmark     func(childComplexity int) int
		CompetenceKey func(childComplexity int) int
		Metrics       func(childComplexity int) int
		Name          func(childComplexity int) int
		Score         func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	CompetenceMetric struct {
		Benchmark         func(childComplexity int) int
		Competence        func(childComplexity int) int
		CompetenceID      func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Formula           func(childComplexity int) int
		MetricDescription func(childComplexity int) int
		MetricID          func(childComplexity int) int
		MetricKey         func(childComplexity int) int
		MetricName        func(childComplexity int) int
		Parameters        func(childComplexity int) int
		Stages            func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		Weight            func(childComplexity int) int
	}

	ConstantParameter struct {
		ConstDescription func(childComplexity int) int
		ConstID          func(childComplexity int) int
		ConstKey         func(childComplexity int) int
		ConstName        func(childComplexity int) int
		ConstValue       func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		Game             func(childComplexity int) int
		GameID           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	Game struct {
		Active             func(childComplexity int) int
		Competencies       func(childComplexity int) int
		ConstantParameters func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		GameID             func(childComplexity int) int
		GameMetrics        func(childComplexity int) int
		GameName           func(childComplexity int) int
		Stages             func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	GameMetric struct {
		Benchmark         func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		Formula           func(childComplexity int) int
		Game              func(childComplexity int) int
		GameID            func(childComplexity int) int
		MetricDescription func(childComplexity int) int
		MetricID          func(childComplexity int) int
		MetricKey         func(childComplexity int) int
		MetricName        func(childComplexity int) int
		Parameters        func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	GameMetricParameter struct {
		CreatedAt        func(childComplexity int) int
		DefaultValue     func(childComplexity int) int
		Description      func(childComplexity int) int
		IsRequired       func(childComplexity int) int
		Metric           func(childComplexity int) int
		MetricID         func(childComplexity int) int
		ParamDescription func(childComplexity int) int
		ParamID          func(childComplexity int) int
		ParamKey         func(childComplexity int) int
		ParamName        func(childComplexity int) int
		ParamType        func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	GlobalMetricResult struct {
		Formula func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	GlobalMetrics struct {
		Adaptability      func(childComplexity int) int
		Autonomy          func(childComplexity int) int
		Consistency       func(childComplexity int) int
		ErrorRecovery     func(childComplexity int) int
		StressPerformance func(childComplexity int) int
		TimeEfficiency    func(childComplexity int) int
	}

	MetricParameter struct {
		CreatedAt        func(childComplexity int) int
		DefaultValue     func(childComplexity int) int
		Description      func(childComplexity int) int
		IsRequired       func(childComplexity int) int
		Metric           func(childComplexity int) int
		MetricID         func(childComplexity int) int
		ParamDescription func(childComplexity int) int
		ParamID          func(childComplexity int) int
		ParamKey         func(childComplexity int) int
		ParamName        func(childComplexity int) int
		ParamType        func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	MetricResult struct {
		Benchmark func(childComplexity int) int
		KpiID     func(childComplexity int) int
		KpiName   func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	Mutation struct {
		AssignMetricToStage        func(childComplexity int, input model.StageMetricInput) int
		CalculatePlayerPerformance func(childComplexity int, input model.PlayerPerformanceInput) int
		CreateCompetence           func(childComplexity int, input model.CompetenceInput) int
		CreateCompetenceMetric     func(childComplexity int, input model.CompetenceMetricInput) int
		CreateConstantParameter    func(childComplexity int, input model.ConstantParameterInput) int
		CreateGame                 func(childComplexity int, input model.GameInput) int
		CreateGameMetric           func(childComplexity int, input model.GameMetricInput) int
		CreateGameMetricParameter  func(childComplexity int, input model.GameMetricParameterInput) int
		CreateMetricParameter      func(childComplexity int, input model.MetricParameterInput) int
		CreateStage                func(childComplexity int, input model.StageInput) int
		DeleteCompetence           func(childComplexity int, competenceID string) int
		DeleteCompetenceMetric     func(childComplexity int, metricID string) int
		DeleteConstantParameter    func(childComplexity int, constID string) int
		DeleteGame                 func(childComplexity int, gameID string) int
		DeleteGameMetric           func(childComplexity int, metricID string) int
		DeleteGameMetricParameter  func(childComplexity int, paramID string) int
		DeleteMetricParameter      func(childComplexity int, paramID string) int
		DeleteStage                func(childComplexity int, stageID string) int
		RemoveMetricFromStage      func(childComplexity int, input model.StageMetricInput) int
		UpdateCompetence           func(childComplexity int, input model.CompetenceUpdateInput) int
		UpdateCompetenceMetric     func(childComplexity int, input model.CompetenceMetricUpdateInput) int
		UpdateConstantParameter    func(childComplexity int, input model.ConstantParameterUpdateInput) int
		UpdateGame                 func(childComplexity int, input model.GameUpdateInput) int
		UpdateGameMetric           func(childComplexity int, input model.GameMetricUpdateInput) int
		UpdateGameMetricParameter  func(childComplexity int, input model.GameMetricParameterUpdateInput) int
		UpdateMetricParameter      func(childComplexity int, input model.MetricParameterUpdateInput) int
		UpdateStage                func(childComplexity int, input model.StageUpdateInput) int
	}

	PlayerPerformance struct {
		BenchmarkComparison func(childComplexity int) int
		CompetenceDetails   func(childComplexity int) int
		GameDate            func(childComplexity int) int
		GameID              func(childComplexity int) int
		GlobalMetrics       func(childComplexity int) int
		PlayerID            func(childComplexity int) int
		PlayerName          func(childComplexity int) int
		ProfileType         func(childComplexity int) int
		StagePerformance    func(childComplexity int) int
		TotalScore          func(childComplexity int) int
		TotalTimeTaken      func(childComplexity int) int
	}

	Query struct {
		GetBenchmarkData              func(childComplexity int, gameID string) int
		GetCompetenceByID             func(childComplexity int, competenceID string) int
		GetCompetenciesByGame         func(childComplexity int, gameID string) int
		GetConstantByID               func(childComplexity int, constID string) int
		GetConstantsByGame            func(childComplexity int, gameID string) int
		GetGameByID                   func(childComplexity int, gameID string) int
		GetGameConfiguration          func(childComplexity int, gameID string) int
		GetGameFormulas               func(childComplexity int, gameID string) int
		GetGameMetricByID             func(childComplexity int, metricID string) int
		GetGameMetricsByGame          func(childComplexity int, gameID string) int
		GetGames                      func(childComplexity int) int
		GetMetricByID                 func(childComplexity int, metricID string) int
		GetMetricsByCompetence        func(childComplexity int, competenceID string) int
		GetMetricsByStage             func(childComplexity int, stageID string) int
		GetParametersByGameMetric     func(childComplexity int, metricID string) int
		GetParametersByMetric         func(childComplexity int, metricID string) int
		GetRequiredParametersForGame  func(childComplexity int, gameID string) int
		GetRequiredParametersForStage func(childComplexity int, stageID string) int
		GetStageByID                  func(childComplexity int, stageID string) int
		GetStagesByGame               func(childComplexity int, gameID string) int
	}

	Stage struct {
		Benchmark   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Game        func(childComplexity int) int
		GameID      func(childComplexity int) int
		Metrics     func(childComplexity int) int
		OptimalTime func(childComplexity int) int
		StageID     func(childComplexity int) int
		StageKey    func(childComplexity int) int
		StageName   func(childComplexity int) int
		StageOrder  func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	StageMetricResult struct {
		Benchmark func(childComplexity int) int
		Category  func(childComplexity int) int
		Formula   func(childComplexity int) int
		KpiID     func(childComplexity int) int
		KpiName   func(childComplexity int) int
		RawData   func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	StagePerformance struct {
		Benchmark        func(childComplexity int) int
		CompletionStatus func(childComplexity int) int
		Metrics          func(childComplexity int) int
		OptimalTime      func(childComplexity int) int
		Score            func(childComplexity int) int
		StageID          func(childComplexity int) int
		StageName        func(childComplexity int) int
		TimeTaken        func(childComplexity int) int
	}

	Subscription struct {
		CompetenceCreated           func(childComplexity int, gameID *string) int
		CompetenceDeleted           func(childComplexity int, competenceID *string) int
		CompetenceMetricCreated     func(childComplexity int, competenceID *string) int
		CompetenceMetricDeleted     func(childComplexity int, metricID *string) int
		CompetenceMetricUpdated     func(childComplexity int, metricID *string) int
		CompetenceUpdated           func(childComplexity int, competenceID *string) int
		ConstantParameterCreated    func(childComplexity int, gameID *string) int
		ConstantParameterDeleted    func(childComplexity int, constID *string) int
		ConstantParameterUpdated    func(childComplexity int, constID *string) int
		GameCreated                 func(childComplexity int) int
		GameDeleted                 func(childComplexity int, gameID *string) int
		GameMetricCreated           func(childComplexity int, gameID *string) int
		GameMetricDeleted           func(childComplexity int, metricID *string) int
		GameMetricParameterCreated  func(childComplexity int, metricID *string) int
		GameMetricParameterDeleted  func(childComplexity int, paramID *string) int
		GameMetricParameterUpdated  func(childComplexity int, paramID *string) int
		GameMetricUpdated           func(childComplexity int, metricID *string) int
		GameUpdated                 func(childComplexity int, gameID *string) int
		MetricAssignedToStage       func(childComplexity int, stageID *string, metricID *string) int
		MetricParameterCreated      func(childComplexity int, metricID *string) int
		MetricParameterDeleted      func(childComplexity int, paramID *string) int
		MetricParameterUpdated      func(childComplexity int, paramID *string) int
		MetricRemovedFromStage      func(childComplexity int, stageID *string, metricID *string) int
		PlayerPerformanceCalculated func(childComplexity int, playerID *string, gameID *string) int
		StageCreated                func(childComplexity int, gameID *string) int
		StageDeleted                func(childComplexity int, stageID *string) int
		StageUpdated                func(childComplexity int, stageID *string) int
	}
}

type CompetenceResolver interface {
	CreatedAt(ctx context.Context, obj *models.Competence) (*string, error)
	UpdatedAt(ctx context.Context, obj *models.Competence) (*string, error)
}
type CompetenceMetricResolver interface {
	CreatedAt(ctx context.Context, obj *models.CompetenceMetric) (*string, error)
	UpdatedAt(ctx context.Context, obj *models.CompetenceMetric) (*string, error)
	Parameters(ctx context.Context, obj *models.CompetenceMetric) ([]*model.MetricParameter, error)
}
type ConstantParameterResolver interface {
	CreatedAt(ctx context.Context, obj *models.ConstantParameter) (*string, error)
	UpdatedAt(ctx context.Context, obj *models.ConstantParameter) (*string, error)
}
type GameResolver interface {
	CreatedAt(ctx context.Context, obj *models.Game) (*string, error)
	UpdatedAt(ctx context.Context, obj *models.Game) (*string, error)
}
type GameMetricResolver interface {
	CreatedAt(ctx context.Context, obj *models.GameMetric) (*string, error)
	UpdatedAt(ctx context.Context, obj *models.GameMetric) (*string, error)
}
type GameMetricParameterResolver interface {
	CreatedAt(ctx context.Context, obj *models.GameMetricParameter) (*string, error)
	UpdatedAt(ctx context.Context, obj *models.GameMetricParameter) (*string, error)
}
type MutationResolver interface {
	CreateGame(ctx context.Context, input model.GameInput) (*models.Game, error)
	UpdateGame(ctx context.Context, input model.GameUpdateInput) (*models.Game, error)
	DeleteGame(ctx context.Context, gameID string) (*bool, error)
	CreateCompetence(ctx context.Context, input model.CompetenceInput) (*models.Competence, error)
	UpdateCompetence(ctx context.Context, input model.CompetenceUpdateInput) (*models.Competence, error)
	DeleteCompetence(ctx context.Context, competenceID string) (*bool, error)
	CreateCompetenceMetric(ctx context.Context, input model.CompetenceMetricInput) (*models.CompetenceMetric, error)
	UpdateCompetenceMetric(ctx context.Context, input model.CompetenceMetricUpdateInput) (*models.CompetenceMetric, error)
	DeleteCompetenceMetric(ctx context.Context, metricID string) (*bool, error)
	CreateMetricParameter(ctx context.Context, input model.MetricParameterInput) (*model.MetricParameter, error)
	UpdateMetricParameter(ctx context.Context, input model.MetricParameterUpdateInput) (*model.MetricParameter, error)
	DeleteMetricParameter(ctx context.Context, paramID string) (*bool, error)
	CreateStage(ctx context.Context, input model.StageInput) (*models.Stage, error)
	UpdateStage(ctx context.Context, input model.StageUpdateInput) (*models.Stage, error)
	DeleteStage(ctx context.Context, stageID string) (*bool, error)
	AssignMetricToStage(ctx context.Context, input model.StageMetricInput) (*bool, error)
	RemoveMetricFromStage(ctx context.Context, input model.StageMetricInput) (*bool, error)
	CreateGameMetric(ctx context.Context, input model.GameMetricInput) (*models.GameMetric, error)
	UpdateGameMetric(ctx context.Context, input model.GameMetricUpdateInput) (*models.GameMetric, error)
	DeleteGameMetric(ctx context.Context, metricID string) (*bool, error)
	CreateGameMetricParameter(ctx context.Context, input model.GameMetricParameterInput) (*models.GameMetricParameter, error)
	UpdateGameMetricParameter(ctx context.Context, input model.GameMetricParameterUpdateInput) (*models.GameMetricParameter, error)
	DeleteGameMetricParameter(ctx context.Context, paramID string) (*bool, error)
	CreateConstantParameter(ctx context.Context, input model.ConstantParameterInput) (*models.ConstantParameter, error)
	UpdateConstantParameter(ctx context.Context, input model.ConstantParameterUpdateInput) (*models.ConstantParameter, error)
	DeleteConstantParameter(ctx context.Context, constID string) (*bool, error)
	CalculatePlayerPerformance(ctx context.Context, input model.PlayerPerformanceInput) (*model.PlayerPerformance, error)
}
type QueryResolver interface {
	GetGames(ctx context.Context) ([]*models.Game, error)
	GetGameByID(ctx context.Context, gameID string) (*models.Game, error)
	GetCompetenciesByGame(ctx context.Context, gameID string) ([]*models.Competence, error)
	GetCompetenceByID(ctx context.Context, competenceID string) (*models.Competence, error)
	GetMetricsByCompetence(ctx context.Context, competenceID string) ([]*models.CompetenceMetric, error)
	GetMetricByID(ctx context.Context, metricID string) (*models.CompetenceMetric, error)
	GetParametersByMetric(ctx context.Context, metricID string) ([]*model.MetricParameter, error)
	GetStagesByGame(ctx context.Context, gameID string) ([]*models.Stage, error)
	GetStageByID(ctx context.Context, stageID string) (*models.Stage, error)
	GetMetricsByStage(ctx context.Context, stageID string) ([]*models.CompetenceMetric, error)
	GetGameMetricsByGame(ctx context.Context, gameID string) ([]*models.GameMetric, error)
	GetGameMetricByID(ctx context.Context, metricID string) (*models.GameMetric, error)
	GetParametersByGameMetric(ctx context.Context, metricID string) ([]*models.GameMetricParameter, error)
	GetConstantsByGame(ctx context.Context, gameID string) ([]*models.ConstantParameter, error)
	GetConstantByID(ctx context.Context, constID string) (*models.ConstantParameter, error)
	GetGameConfiguration(ctx context.Context, gameID string) (*models.Game, error)
	GetRequiredParametersForGame(ctx context.Context, gameID string) ([]*models.Stage, error)
	GetRequiredParametersForStage(ctx context.Context, stageID string) ([]*model.MetricParameter, error)
	GetGameFormulas(ctx context.Context, gameID string) (*models.Game, error)
	GetBenchmarkData(ctx context.Context, gameID string) (*models.Game, error)
}
type StageResolver interface {
	StageOrder(ctx context.Context, obj *models.Stage) (*int32, error)

	OptimalTime(ctx context.Context, obj *models.Stage) (*int32, error)
	CreatedAt(ctx context.Context, obj *models.Stage) (*string, error)
	UpdatedAt(ctx context.Context, obj *models.Stage) (*string, error)
}
type SubscriptionResolver interface {
	GameCreated(ctx context.Context) (<-chan *models.Game, error)
	GameUpdated(ctx context.Context, gameID *string) (<-chan *models.Game, error)
	GameDeleted(ctx context.Context, gameID *string) (<-chan *string, error)
	CompetenceCreated(ctx context.Context, gameID *string) (<-chan *models.Competence, error)
	CompetenceUpdated(ctx context.Context, competenceID *string) (<-chan *models.Competence, error)
	CompetenceDeleted(ctx context.Context, competenceID *string) (<-chan *string, error)
	CompetenceMetricCreated(ctx context.Context, competenceID *string) (<-chan *models.CompetenceMetric, error)
	CompetenceMetricUpdated(ctx context.Context, metricID *string) (<-chan *models.CompetenceMetric, error)
	CompetenceMetricDeleted(ctx context.Context, metricID *string) (<-chan *string, error)
	MetricParameterCreated(ctx context.Context, metricID *string) (<-chan *model.MetricParameter, error)
	MetricParameterUpdated(ctx context.Context, paramID *string) (<-chan *model.MetricParameter, error)
	MetricParameterDeleted(ctx context.Context, paramID *string) (<-chan *string, error)
	StageCreated(ctx context.Context, gameID *string) (<-chan *models.Stage, error)
	StageUpdated(ctx context.Context, stageID *string) (<-chan *models.Stage, error)
	StageDeleted(ctx context.Context, stageID *string) (<-chan *string, error)
	MetricAssignedToStage(ctx context.Context, stageID *string, metricID *string) (<-chan *bool, error)
	MetricRemovedFromStage(ctx context.Context, stageID *string, metricID *string) (<-chan *bool, error)
	GameMetricCreated(ctx context.Context, gameID *string) (<-chan *models.GameMetric, error)
	GameMetricUpdated(ctx context.Context, metricID *string) (<-chan *models.GameMetric, error)
	GameMetricDeleted(ctx context.Context, metricID *string) (<-chan *string, error)
	GameMetricParameterCreated(ctx context.Context, metricID *string) (<-chan *models.GameMetricParameter, error)
	GameMetricParameterUpdated(ctx context.Context, paramID *string) (<-chan *models.GameMetricParameter, error)
	GameMetricParameterDeleted(ctx context.Context, paramID *string) (<-chan *string, error)
	ConstantParameterCreated(ctx context.Context, gameID *string) (<-chan *models.ConstantParameter, error)
	ConstantParameterUpdated(ctx context.Context, constID *string) (<-chan *models.ConstantParameter, error)
	ConstantParameterDeleted(ctx context.Context, constID *string) (<-chan *string, error)
	PlayerPerformanceCalculated(ctx context.Context, playerID *string, gameID *string) (<-chan *model.PlayerPerformance, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "BenchmarkComparison.benchmarkScore":
		if e.complexity.BenchmarkComparison.BenchmarkScore == nil {
			break
		}

		return e.complexity.BenchmarkComparison.BenchmarkScore(childComplexity), true

	case "BenchmarkComparison.percentileRank":
		if e.complexity.BenchmarkComparison.PercentileRank == nil {
			break
		}

		return e.complexity.BenchmarkComparison.PercentileRank(childComplexity), true

	case "BenchmarkComparison.relativeToBenchmark":
		if e.complexity.BenchmarkComparison.RelativeToBenchmark == nil {
			break
		}

		return e.complexity.BenchmarkComparison.RelativeToBenchmark(childComplexity), true

	case "Competence.benchmark":
		if e.complexity.Competence.Benchmark == nil {
			break
		}

		return e.complexity.Competence.Benchmark(childComplexity), true

	case "Competence.competenceId":
		if e.complexity.Competence.CompetenceID == nil {
			break
		}

		return e.complexity.Competence.CompetenceID(childComplexity), true

	case "Competence.competenceKey":
		if e.complexity.Competence.CompetenceKey == nil {
			break
		}

		return e.complexity.Competence.CompetenceKey(childComplexity), true

	case "Competence.competenceName":
		if e.complexity.Competence.CompetenceName == nil {
			break
		}

		return e.complexity.Competence.CompetenceName(childComplexity), true

	case "Competence.createdAt":
		if e.complexity.Competence.CreatedAt == nil {
			break
		}

		return e.complexity.Competence.CreatedAt(childComplexity), true

	case "Competence.description":
		if e.complexity.Competence.Description == nil {
			break
		}

		return e.complexity.Competence.Description(childComplexity), true

	case "Competence.game":
		if e.complexity.Competence.Game == nil {
			break
		}

		return e.complexity.Competence.Game(childComplexity), true

	case "Competence.gameId":
		if e.complexity.Competence.GameID == nil {
			break
		}

		return e.complexity.Competence.GameID(childComplexity), true

	case "Competence.metrics":
		if e.complexity.Competence.Metrics == nil {
			break
		}

		return e.complexity.Competence.Metrics(childComplexity), true

	case "Competence.updatedAt":
		if e.complexity.Competence.UpdatedAt == nil {
			break
		}

		return e.complexity.Competence.UpdatedAt(childComplexity), true

	case "Competence.weight":
		if e.complexity.Competence.Weight == nil {
			break
		}

		return e.complexity.Competence.Weight(childComplexity), true

	case "CompetenceDetail.benchmark":
		if e.complexity.CompetenceDetail.Benchmark == nil {
			break
		}

		return e.complexity.CompetenceDetail.Benchmark(childComplexity), true

	case "CompetenceDetail.competenceKey":
		if e.complexity.CompetenceDetail.CompetenceKey == nil {
			break
		}

		return e.complexity.CompetenceDetail.CompetenceKey(childComplexity), true

	case "CompetenceDetail.metrics":
		if e.complexity.CompetenceDetail.Metrics == nil {
			break
		}

		return e.complexity.CompetenceDetail.Metrics(childComplexity), true

	case "CompetenceDetail.name":
		if e.complexity.CompetenceDetail.Name == nil {
			break
		}

		return e.complexity.CompetenceDetail.Name(childComplexity), true

	case "CompetenceDetail.score":
		if e.complexity.CompetenceDetail.Score == nil {
			break
		}

		return e.complexity.CompetenceDetail.Score(childComplexity), true

	case "CompetenceDetail.weight":
		if e.complexity.CompetenceDetail.Weight == nil {
			break
		}

		return e.complexity.CompetenceDetail.Weight(childComplexity), true

	case "CompetenceMetric.benchmark":
		if e.complexity.CompetenceMetric.Benchmark == nil {
			break
		}

		return e.complexity.CompetenceMetric.Benchmark(childComplexity), true

	case "CompetenceMetric.competence":
		if e.complexity.CompetenceMetric.Competence == nil {
			break
		}

		return e.complexity.CompetenceMetric.Competence(childComplexity), true

	case "CompetenceMetric.competenceId":
		if e.complexity.CompetenceMetric.CompetenceID == nil {
			break
		}

		return e.complexity.CompetenceMetric.CompetenceID(childComplexity), true

	case "CompetenceMetric.createdAt":
		if e.complexity.CompetenceMetric.CreatedAt == nil {
			break
		}

		return e.complexity.CompetenceMetric.CreatedAt(childComplexity), true

	case "CompetenceMetric.formula":
		if e.complexity.CompetenceMetric.Formula == nil {
			break
		}

		return e.complexity.CompetenceMetric.Formula(childComplexity), true

	case "CompetenceMetric.metricDescription":
		if e.complexity.CompetenceMetric.MetricDescription == nil {
			break
		}

		return e.complexity.CompetenceMetric.MetricDescription(childComplexity), true

	case "CompetenceMetric.metricId":
		if e.complexity.CompetenceMetric.MetricID == nil {
			break
		}

		return e.complexity.CompetenceMetric.MetricID(childComplexity), true

	case "CompetenceMetric.metricKey":
		if e.complexity.CompetenceMetric.MetricKey == nil {
			break
		}

		return e.complexity.CompetenceMetric.MetricKey(childComplexity), true

	case "CompetenceMetric.metricName":
		if e.complexity.CompetenceMetric.MetricName == nil {
			break
		}

		return e.complexity.CompetenceMetric.MetricName(childComplexity), true

	case "CompetenceMetric.parameters":
		if e.complexity.CompetenceMetric.Parameters == nil {
			break
		}

		return e.complexity.CompetenceMetric.Parameters(childComplexity), true

	case "CompetenceMetric.stages":
		if e.complexity.CompetenceMetric.Stages == nil {
			break
		}

		return e.complexity.CompetenceMetric.Stages(childComplexity), true

	case "CompetenceMetric.updatedAt":
		if e.complexity.CompetenceMetric.UpdatedAt == nil {
			break
		}

		return e.complexity.CompetenceMetric.UpdatedAt(childComplexity), true

	case "CompetenceMetric.weight":
		if e.complexity.CompetenceMetric.Weight == nil {
			break
		}

		return e.complexity.CompetenceMetric.Weight(childComplexity), true

	case "ConstantParameter.constDescription":
		if e.complexity.ConstantParameter.ConstDescription == nil {
			break
		}

		return e.complexity.ConstantParameter.ConstDescription(childComplexity), true

	case "ConstantParameter.constId":
		if e.complexity.ConstantParameter.ConstID == nil {
			break
		}

		return e.complexity.ConstantParameter.ConstID(childComplexity), true

	case "ConstantParameter.constKey":
		if e.complexity.ConstantParameter.ConstKey == nil {
			break
		}

		return e.complexity.ConstantParameter.ConstKey(childComplexity), true

	case "ConstantParameter.constName":
		if e.complexity.ConstantParameter.ConstName == nil {
			break
		}

		return e.complexity.ConstantParameter.ConstName(childComplexity), true

	case "ConstantParameter.constValue":
		if e.complexity.ConstantParameter.ConstValue == nil {
			break
		}

		return e.complexity.ConstantParameter.ConstValue(childComplexity), true

	case "ConstantParameter.createdAt":
		if e.complexity.ConstantParameter.CreatedAt == nil {
			break
		}

		return e.complexity.ConstantParameter.CreatedAt(childComplexity), true

	case "ConstantParameter.description":
		if e.complexity.ConstantParameter.Description == nil {
			break
		}

		return e.complexity.ConstantParameter.Description(childComplexity), true

	case "ConstantParameter.game":
		if e.complexity.ConstantParameter.Game == nil {
			break
		}

		return e.complexity.ConstantParameter.Game(childComplexity), true

	case "ConstantParameter.gameId":
		if e.complexity.ConstantParameter.GameID == nil {
			break
		}

		return e.complexity.ConstantParameter.GameID(childComplexity), true

	case "ConstantParameter.updatedAt":
		if e.complexity.ConstantParameter.UpdatedAt == nil {
			break
		}

		return e.complexity.ConstantParameter.UpdatedAt(childComplexity), true

	case "Game.active":
		if e.complexity.Game.Active == nil {
			break
		}

		return e.complexity.Game.Active(childComplexity), true

	case "Game.competencies":
		if e.complexity.Game.Competencies == nil {
			break
		}

		return e.complexity.Game.Competencies(childComplexity), true

	case "Game.constantParameters":
		if e.complexity.Game.ConstantParameters == nil {
			break
		}

		return e.complexity.Game.ConstantParameters(childComplexity), true

	case "Game.createdAt":
		if e.complexity.Game.CreatedAt == nil {
			break
		}

		return e.complexity.Game.CreatedAt(childComplexity), true

	case "Game.description":
		if e.complexity.Game.Description == nil {
			break
		}

		return e.complexity.Game.Description(childComplexity), true

	case "Game.gameId":
		if e.complexity.Game.GameID == nil {
			break
		}

		return e.complexity.Game.GameID(childComplexity), true

	case "Game.gameMetrics":
		if e.complexity.Game.GameMetrics == nil {
			break
		}

		return e.complexity.Game.GameMetrics(childComplexity), true

	case "Game.gameName":
		if e.complexity.Game.GameName == nil {
			break
		}

		return e.complexity.Game.GameName(childComplexity), true

	case "Game.stages":
		if e.complexity.Game.Stages == nil {
			break
		}

		return e.complexity.Game.Stages(childComplexity), true

	case "Game.updatedAt":
		if e.complexity.Game.UpdatedAt == nil {
			break
		}

		return e.complexity.Game.UpdatedAt(childComplexity), true

	case "GameMetric.benchmark":
		if e.complexity.GameMetric.Benchmark == nil {
			break
		}

		return e.complexity.GameMetric.Benchmark(childComplexity), true

	case "GameMetric.createdAt":
		if e.complexity.GameMetric.CreatedAt == nil {
			break
		}

		return e.complexity.GameMetric.CreatedAt(childComplexity), true

	case "GameMetric.description":
		if e.complexity.GameMetric.Description == nil {
			break
		}

		return e.complexity.GameMetric.Description(childComplexity), true

	case "GameMetric.formula":
		if e.complexity.GameMetric.Formula == nil {
			break
		}

		return e.complexity.GameMetric.Formula(childComplexity), true

	case "GameMetric.game":
		if e.complexity.GameMetric.Game == nil {
			break
		}

		return e.complexity.GameMetric.Game(childComplexity), true

	case "GameMetric.gameId":
		if e.complexity.GameMetric.GameID == nil {
			break
		}

		return e.complexity.GameMetric.GameID(childComplexity), true

	case "GameMetric.metricDescription":
		if e.complexity.GameMetric.MetricDescription == nil {
			break
		}

		return e.complexity.GameMetric.MetricDescription(childComplexity), true

	case "GameMetric.metricId":
		if e.complexity.GameMetric.MetricID == nil {
			break
		}

		return e.complexity.GameMetric.MetricID(childComplexity), true

	case "GameMetric.metricKey":
		if e.complexity.GameMetric.MetricKey == nil {
			break
		}

		return e.complexity.GameMetric.MetricKey(childComplexity), true

	case "GameMetric.metricName":
		if e.complexity.GameMetric.MetricName == nil {
			break
		}

		return e.complexity.GameMetric.MetricName(childComplexity), true

	case "GameMetric.parameters":
		if e.complexity.GameMetric.Parameters == nil {
			break
		}

		return e.complexity.GameMetric.Parameters(childComplexity), true

	case "GameMetric.updatedAt":
		if e.complexity.GameMetric.UpdatedAt == nil {
			break
		}

		return e.complexity.GameMetric.UpdatedAt(childComplexity), true

	case "GameMetricParameter.createdAt":
		if e.complexity.GameMetricParameter.CreatedAt == nil {
			break
		}

		return e.complexity.GameMetricParameter.CreatedAt(childComplexity), true

	case "GameMetricParameter.defaultValue":
		if e.complexity.GameMetricParameter.DefaultValue == nil {
			break
		}

		return e.complexity.GameMetricParameter.DefaultValue(childComplexity), true

	case "GameMetricParameter.description":
		if e.complexity.GameMetricParameter.Description == nil {
			break
		}

		return e.complexity.GameMetricParameter.Description(childComplexity), true

	case "GameMetricParameter.isRequired":
		if e.complexity.GameMetricParameter.IsRequired == nil {
			break
		}

		return e.complexity.GameMetricParameter.IsRequired(childComplexity), true

	case "GameMetricParameter.metric":
		if e.complexity.GameMetricParameter.Metric == nil {
			break
		}

		return e.complexity.GameMetricParameter.Metric(childComplexity), true

	case "GameMetricParameter.metricId":
		if e.complexity.GameMetricParameter.MetricID == nil {
			break
		}

		return e.complexity.GameMetricParameter.MetricID(childComplexity), true

	case "GameMetricParameter.paramDescription":
		if e.complexity.GameMetricParameter.ParamDescription == nil {
			break
		}

		return e.complexity.GameMetricParameter.ParamDescription(childComplexity), true

	case "GameMetricParameter.paramId":
		if e.complexity.GameMetricParameter.ParamID == nil {
			break
		}

		return e.complexity.GameMetricParameter.ParamID(childComplexity), true

	case "GameMetricParameter.paramKey":
		if e.complexity.GameMetricParameter.ParamKey == nil {
			break
		}

		return e.complexity.GameMetricParameter.ParamKey(childComplexity), true

	case "GameMetricParameter.paramName":
		if e.complexity.GameMetricParameter.ParamName == nil {
			break
		}

		return e.complexity.GameMetricParameter.ParamName(childComplexity), true

	case "GameMetricParameter.paramType":
		if e.complexity.GameMetricParameter.ParamType == nil {
			break
		}

		return e.complexity.GameMetricParameter.ParamType(childComplexity), true

	case "GameMetricParameter.updatedAt":
		if e.complexity.GameMetricParameter.UpdatedAt == nil {
			break
		}

		return e.complexity.GameMetricParameter.UpdatedAt(childComplexity), true

	case "GlobalMetricResult.formula":
		if e.complexity.GlobalMetricResult.Formula == nil {
			break
		}

		return e.complexity.GlobalMetricResult.Formula(childComplexity), true

	case "GlobalMetricResult.value":
		if e.complexity.GlobalMetricResult.Value == nil {
			break
		}

		return e.complexity.GlobalMetricResult.Value(childComplexity), true

	case "GlobalMetrics.adaptability":
		if e.complexity.GlobalMetrics.Adaptability == nil {
			break
		}

		return e.complexity.GlobalMetrics.Adaptability(childComplexity), true

	case "GlobalMetrics.autonomy":
		if e.complexity.GlobalMetrics.Autonomy == nil {
			break
		}

		return e.complexity.GlobalMetrics.Autonomy(childComplexity), true

	case "GlobalMetrics.consistency":
		if e.complexity.GlobalMetrics.Consistency == nil {
			break
		}

		return e.complexity.GlobalMetrics.Consistency(childComplexity), true

	case "GlobalMetrics.errorRecovery":
		if e.complexity.GlobalMetrics.ErrorRecovery == nil {
			break
		}

		return e.complexity.GlobalMetrics.ErrorRecovery(childComplexity), true

	case "GlobalMetrics.stressPerformance":
		if e.complexity.GlobalMetrics.StressPerformance == nil {
			break
		}

		return e.complexity.GlobalMetrics.StressPerformance(childComplexity), true

	case "GlobalMetrics.timeEfficiency":
		if e.complexity.GlobalMetrics.TimeEfficiency == nil {
			break
		}

		return e.complexity.GlobalMetrics.TimeEfficiency(childComplexity), true

	case "MetricParameter.createdAt":
		if e.complexity.MetricParameter.CreatedAt == nil {
			break
		}

		return e.complexity.MetricParameter.CreatedAt(childComplexity), true

	case "MetricParameter.defaultValue":
		if e.complexity.MetricParameter.DefaultValue == nil {
			break
		}

		return e.complexity.MetricParameter.DefaultValue(childComplexity), true

	case "MetricParameter.description":
		if e.complexity.MetricParameter.Description == nil {
			break
		}

		return e.complexity.MetricParameter.Description(childComplexity), true

	case "MetricParameter.isRequired":
		if e.complexity.MetricParameter.IsRequired == nil {
			break
		}

		return e.complexity.MetricParameter.IsRequired(childComplexity), true

	case "MetricParameter.metric":
		if e.complexity.MetricParameter.Metric == nil {
			break
		}

		return e.complexity.MetricParameter.Metric(childComplexity), true

	case "MetricParameter.metricId":
		if e.complexity.MetricParameter.MetricID == nil {
			break
		}

		return e.complexity.MetricParameter.MetricID(childComplexity), true

	case "MetricParameter.paramDescription":
		if e.complexity.MetricParameter.ParamDescription == nil {
			break
		}

		return e.complexity.MetricParameter.ParamDescription(childComplexity), true

	case "MetricParameter.paramId":
		if e.complexity.MetricParameter.ParamID == nil {
			break
		}

		return e.complexity.MetricParameter.ParamID(childComplexity), true

	case "MetricParameter.paramKey":
		if e.complexity.MetricParameter.ParamKey == nil {
			break
		}

		return e.complexity.MetricParameter.ParamKey(childComplexity), true

	case "MetricParameter.paramName":
		if e.complexity.MetricParameter.ParamName == nil {
			break
		}

		return e.complexity.MetricParameter.ParamName(childComplexity), true

	case "MetricParameter.paramType":
		if e.complexity.MetricParameter.ParamType == nil {
			break
		}

		return e.complexity.MetricParameter.ParamType(childComplexity), true

	case "MetricParameter.updatedAt":
		if e.complexity.MetricParameter.UpdatedAt == nil {
			break
		}

		return e.complexity.MetricParameter.UpdatedAt(childComplexity), true

	case "MetricResult.benchmark":
		if e.complexity.MetricResult.Benchmark == nil {
			break
		}

		return e.complexity.MetricResult.Benchmark(childComplexity), true

	case "MetricResult.kpiId":
		if e.complexity.MetricResult.KpiID == nil {
			break
		}

		return e.complexity.MetricResult.KpiID(childComplexity), true

	case "MetricResult.kpiName":
		if e.complexity.MetricResult.KpiName == nil {
			break
		}

		return e.complexity.MetricResult.KpiName(childComplexity), true

	case "MetricResult.value":
		if e.complexity.MetricResult.Value == nil {
			break
		}

		return e.complexity.MetricResult.Value(childComplexity), true

	case "Mutation.assignMetricToStage":
		if e.complexity.Mutation.AssignMetricToStage == nil {
			break
		}

		args, err := ec.field_Mutation_assignMetricToStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignMetricToStage(childComplexity, args["input"].(model.StageMetricInput)), true

	case "Mutation.calculatePlayerPerformance":
		if e.complexity.Mutation.CalculatePlayerPerformance == nil {
			break
		}

		args, err := ec.field_Mutation_calculatePlayerPerformance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CalculatePlayerPerformance(childComplexity, args["input"].(model.PlayerPerformanceInput)), true

	case "Mutation.createCompetence":
		if e.complexity.Mutation.CreateCompetence == nil {
			break
		}

		args, err := ec.field_Mutation_createCompetence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompetence(childComplexity, args["input"].(model.CompetenceInput)), true

	case "Mutation.createCompetenceMetric":
		if e.complexity.Mutation.CreateCompetenceMetric == nil {
			break
		}

		args, err := ec.field_Mutation_createCompetenceMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompetenceMetric(childComplexity, args["input"].(model.CompetenceMetricInput)), true

	case "Mutation.createConstantParameter":
		if e.complexity.Mutation.CreateConstantParameter == nil {
			break
		}

		args, err := ec.field_Mutation_createConstantParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateConstantParameter(childComplexity, args["input"].(model.ConstantParameterInput)), true

	case "Mutation.createGame":
		if e.complexity.Mutation.CreateGame == nil {
			break
		}

		args, err := ec.field_Mutation_createGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGame(childComplexity, args["input"].(model.GameInput)), true

	case "Mutation.createGameMetric":
		if e.complexity.Mutation.CreateGameMetric == nil {
			break
		}

		args, err := ec.field_Mutation_createGameMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGameMetric(childComplexity, args["input"].(model.GameMetricInput)), true

	case "Mutation.createGameMetricParameter":
		if e.complexity.Mutation.CreateGameMetricParameter == nil {
			break
		}

		args, err := ec.field_Mutation_createGameMetricParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGameMetricParameter(childComplexity, args["input"].(model.GameMetricParameterInput)), true

	case "Mutation.createMetricParameter":
		if e.complexity.Mutation.CreateMetricParameter == nil {
			break
		}

		args, err := ec.field_Mutation_createMetricParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMetricParameter(childComplexity, args["input"].(model.MetricParameterInput)), true

	case "Mutation.createStage":
		if e.complexity.Mutation.CreateStage == nil {
			break
		}

		args, err := ec.field_Mutation_createStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateStage(childComplexity, args["input"].(model.StageInput)), true

	case "Mutation.deleteCompetence":
		if e.complexity.Mutation.DeleteCompetence == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompetence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompetence(childComplexity, args["competenceId"].(string)), true

	case "Mutation.deleteCompetenceMetric":
		if e.complexity.Mutation.DeleteCompetenceMetric == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompetenceMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompetenceMetric(childComplexity, args["metricId"].(string)), true

	case "Mutation.deleteConstantParameter":
		if e.complexity.Mutation.DeleteConstantParameter == nil {
			break
		}

		args, err := ec.field_Mutation_deleteConstantParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConstantParameter(childComplexity, args["constId"].(string)), true

	case "Mutation.deleteGame":
		if e.complexity.Mutation.DeleteGame == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGame(childComplexity, args["gameId"].(string)), true

	case "Mutation.deleteGameMetric":
		if e.complexity.Mutation.DeleteGameMetric == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGameMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGameMetric(childComplexity, args["metricId"].(string)), true

	case "Mutation.deleteGameMetricParameter":
		if e.complexity.Mutation.DeleteGameMetricParameter == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGameMetricParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGameMetricParameter(childComplexity, args["paramId"].(string)), true

	case "Mutation.deleteMetricParameter":
		if e.complexity.Mutation.DeleteMetricParameter == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMetricParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMetricParameter(childComplexity, args["paramId"].(string)), true

	case "Mutation.deleteStage":
		if e.complexity.Mutation.DeleteStage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStage(childComplexity, args["stageId"].(string)), true

	case "Mutation.removeMetricFromStage":
		if e.complexity.Mutation.RemoveMetricFromStage == nil {
			break
		}

		args, err := ec.field_Mutation_removeMetricFromStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveMetricFromStage(childComplexity, args["input"].(model.StageMetricInput)), true

	case "Mutation.updateCompetence":
		if e.complexity.Mutation.UpdateCompetence == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompetence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompetence(childComplexity, args["input"].(model.CompetenceUpdateInput)), true

	case "Mutation.updateCompetenceMetric":
		if e.complexity.Mutation.UpdateCompetenceMetric == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompetenceMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompetenceMetric(childComplexity, args["input"].(model.CompetenceMetricUpdateInput)), true

	case "Mutation.updateConstantParameter":
		if e.complexity.Mutation.UpdateConstantParameter == nil {
			break
		}

		args, err := ec.field_Mutation_updateConstantParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConstantParameter(childComplexity, args["input"].(model.ConstantParameterUpdateInput)), true

	case "Mutation.updateGame":
		if e.complexity.Mutation.UpdateGame == nil {
			break
		}

		args, err := ec.field_Mutation_updateGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGame(childComplexity, args["input"].(model.GameUpdateInput)), true

	case "Mutation.updateGameMetric":
		if e.complexity.Mutation.UpdateGameMetric == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameMetric(childComplexity, args["input"].(model.GameMetricUpdateInput)), true

	case "Mutation.updateGameMetricParameter":
		if e.complexity.Mutation.UpdateGameMetricParameter == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameMetricParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameMetricParameter(childComplexity, args["input"].(model.GameMetricParameterUpdateInput)), true

	case "Mutation.updateMetricParameter":
		if e.complexity.Mutation.UpdateMetricParameter == nil {
			break
		}

		args, err := ec.field_Mutation_updateMetricParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMetricParameter(childComplexity, args["input"].(model.MetricParameterUpdateInput)), true

	case "Mutation.updateStage":
		if e.complexity.Mutation.UpdateStage == nil {
			break
		}

		args, err := ec.field_Mutation_updateStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateStage(childComplexity, args["input"].(model.StageUpdateInput)), true

	case "PlayerPerformance.benchmarkComparison":
		if e.complexity.PlayerPerformance.BenchmarkComparison == nil {
			break
		}

		return e.complexity.PlayerPerformance.BenchmarkComparison(childComplexity), true

	case "PlayerPerformance.competenceDetails":
		if e.complexity.PlayerPerformance.CompetenceDetails == nil {
			break
		}

		return e.complexity.PlayerPerformance.CompetenceDetails(childComplexity), true

	case "PlayerPerformance.gameDate":
		if e.complexity.PlayerPerformance.GameDate == nil {
			break
		}

		return e.complexity.PlayerPerformance.GameDate(childComplexity), true

	case "PlayerPerformance.gameId":
		if e.complexity.PlayerPerformance.GameID == nil {
			break
		}

		return e.complexity.PlayerPerformance.GameID(childComplexity), true

	case "PlayerPerformance.globalMetrics":
		if e.complexity.PlayerPerformance.GlobalMetrics == nil {
			break
		}

		return e.complexity.PlayerPerformance.GlobalMetrics(childComplexity), true

	case "PlayerPerformance.playerId":
		if e.complexity.PlayerPerformance.PlayerID == nil {
			break
		}

		return e.complexity.PlayerPerformance.PlayerID(childComplexity), true

	case "PlayerPerformance.playerName":
		if e.complexity.PlayerPerformance.PlayerName == nil {
			break
		}

		return e.complexity.PlayerPerformance.PlayerName(childComplexity), true

	case "PlayerPerformance.profileType":
		if e.complexity.PlayerPerformance.ProfileType == nil {
			break
		}

		return e.complexity.PlayerPerformance.ProfileType(childComplexity), true

	case "PlayerPerformance.stagePerformance":
		if e.complexity.PlayerPerformance.StagePerformance == nil {
			break
		}

		return e.complexity.PlayerPerformance.StagePerformance(childComplexity), true

	case "PlayerPerformance.totalScore":
		if e.complexity.PlayerPerformance.TotalScore == nil {
			break
		}

		return e.complexity.PlayerPerformance.TotalScore(childComplexity), true

	case "PlayerPerformance.totalTimeTaken":
		if e.complexity.PlayerPerformance.TotalTimeTaken == nil {
			break
		}

		return e.complexity.PlayerPerformance.TotalTimeTaken(childComplexity), true

	case "Query.getBenchmarkData":
		if e.complexity.Query.GetBenchmarkData == nil {
			break
		}

		args, err := ec.field_Query_getBenchmarkData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBenchmarkData(childComplexity, args["gameId"].(string)), true

	case "Query.getCompetenceById":
		if e.complexity.Query.GetCompetenceByID == nil {
			break
		}

		args, err := ec.field_Query_getCompetenceById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompetenceByID(childComplexity, args["competenceId"].(string)), true

	case "Query.getCompetenciesByGame":
		if e.complexity.Query.GetCompetenciesByGame == nil {
			break
		}

		args, err := ec.field_Query_getCompetenciesByGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompetenciesByGame(childComplexity, args["gameId"].(string)), true

	case "Query.getConstantById":
		if e.complexity.Query.GetConstantByID == nil {
			break
		}

		args, err := ec.field_Query_getConstantById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetConstantByID(childComplexity, args["constId"].(string)), true

	case "Query.getConstantsByGame":
		if e.complexity.Query.GetConstantsByGame == nil {
			break
		}

		args, err := ec.field_Query_getConstantsByGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetConstantsByGame(childComplexity, args["gameId"].(string)), true

	case "Query.getGameById":
		if e.complexity.Query.GetGameByID == nil {
			break
		}

		args, err := ec.field_Query_getGameById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGameByID(childComplexity, args["gameId"].(string)), true

	case "Query.getGameConfiguration":
		if e.complexity.Query.GetGameConfiguration == nil {
			break
		}

		args, err := ec.field_Query_getGameConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGameConfiguration(childComplexity, args["gameId"].(string)), true

	case "Query.getGameFormulas":
		if e.complexity.Query.GetGameFormulas == nil {
			break
		}

		args, err := ec.field_Query_getGameFormulas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGameFormulas(childComplexity, args["gameId"].(string)), true

	case "Query.getGameMetricById":
		if e.complexity.Query.GetGameMetricByID == nil {
			break
		}

		args, err := ec.field_Query_getGameMetricById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGameMetricByID(childComplexity, args["metricId"].(string)), true

	case "Query.getGameMetricsByGame":
		if e.complexity.Query.GetGameMetricsByGame == nil {
			break
		}

		args, err := ec.field_Query_getGameMetricsByGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetGameMetricsByGame(childComplexity, args["gameId"].(string)), true

	case "Query.getGames":
		if e.complexity.Query.GetGames == nil {
			break
		}

		return e.complexity.Query.GetGames(childComplexity), true

	case "Query.getMetricById":
		if e.complexity.Query.GetMetricByID == nil {
			break
		}

		args, err := ec.field_Query_getMetricById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMetricByID(childComplexity, args["metricId"].(string)), true

	case "Query.getMetricsByCompetence":
		if e.complexity.Query.GetMetricsByCompetence == nil {
			break
		}

		args, err := ec.field_Query_getMetricsByCompetence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMetricsByCompetence(childComplexity, args["competenceId"].(string)), true

	case "Query.getMetricsByStage":
		if e.complexity.Query.GetMetricsByStage == nil {
			break
		}

		args, err := ec.field_Query_getMetricsByStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMetricsByStage(childComplexity, args["stageId"].(string)), true

	case "Query.getParametersByGameMetric":
		if e.complexity.Query.GetParametersByGameMetric == nil {
			break
		}

		args, err := ec.field_Query_getParametersByGameMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetParametersByGameMetric(childComplexity, args["metricId"].(string)), true

	case "Query.getParametersByMetric":
		if e.complexity.Query.GetParametersByMetric == nil {
			break
		}

		args, err := ec.field_Query_getParametersByMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetParametersByMetric(childComplexity, args["metricId"].(string)), true

	case "Query.getRequiredParametersForGame":
		if e.complexity.Query.GetRequiredParametersForGame == nil {
			break
		}

		args, err := ec.field_Query_getRequiredParametersForGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRequiredParametersForGame(childComplexity, args["gameId"].(string)), true

	case "Query.getRequiredParametersForStage":
		if e.complexity.Query.GetRequiredParametersForStage == nil {
			break
		}

		args, err := ec.field_Query_getRequiredParametersForStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRequiredParametersForStage(childComplexity, args["stageId"].(string)), true

	case "Query.getStageById":
		if e.complexity.Query.GetStageByID == nil {
			break
		}

		args, err := ec.field_Query_getStageById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetStageByID(childComplexity, args["stageId"].(string)), true

	case "Query.getStagesByGame":
		if e.complexity.Query.GetStagesByGame == nil {
			break
		}

		args, err := ec.field_Query_getStagesByGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetStagesByGame(childComplexity, args["gameId"].(string)), true

	case "Stage.benchmark":
		if e.complexity.Stage.Benchmark == nil {
			break
		}

		return e.complexity.Stage.Benchmark(childComplexity), true

	case "Stage.createdAt":
		if e.complexity.Stage.CreatedAt == nil {
			break
		}

		return e.complexity.Stage.CreatedAt(childComplexity), true

	case "Stage.description":
		if e.complexity.Stage.Description == nil {
			break
		}

		return e.complexity.Stage.Description(childComplexity), true

	case "Stage.game":
		if e.complexity.Stage.Game == nil {
			break
		}

		return e.complexity.Stage.Game(childComplexity), true

	case "Stage.gameId":
		if e.complexity.Stage.GameID == nil {
			break
		}

		return e.complexity.Stage.GameID(childComplexity), true

	case "Stage.metrics":
		if e.complexity.Stage.Metrics == nil {
			break
		}

		return e.complexity.Stage.Metrics(childComplexity), true

	case "Stage.optimalTime":
		if e.complexity.Stage.OptimalTime == nil {
			break
		}

		return e.complexity.Stage.OptimalTime(childComplexity), true

	case "Stage.stageId":
		if e.complexity.Stage.StageID == nil {
			break
		}

		return e.complexity.Stage.StageID(childComplexity), true

	case "Stage.stageKey":
		if e.complexity.Stage.StageKey == nil {
			break
		}

		return e.complexity.Stage.StageKey(childComplexity), true

	case "Stage.stageName":
		if e.complexity.Stage.StageName == nil {
			break
		}

		return e.complexity.Stage.StageName(childComplexity), true

	case "Stage.stageOrder":
		if e.complexity.Stage.StageOrder == nil {
			break
		}

		return e.complexity.Stage.StageOrder(childComplexity), true

	case "Stage.updatedAt":
		if e.complexity.Stage.UpdatedAt == nil {
			break
		}

		return e.complexity.Stage.UpdatedAt(childComplexity), true

	case "StageMetricResult.benchmark":
		if e.complexity.StageMetricResult.Benchmark == nil {
			break
		}

		return e.complexity.StageMetricResult.Benchmark(childComplexity), true

	case "StageMetricResult.category":
		if e.complexity.StageMetricResult.Category == nil {
			break
		}

		return e.complexity.StageMetricResult.Category(childComplexity), true

	case "StageMetricResult.formula":
		if e.complexity.StageMetricResult.Formula == nil {
			break
		}

		return e.complexity.StageMetricResult.Formula(childComplexity), true

	case "StageMetricResult.kpiId":
		if e.complexity.StageMetricResult.KpiID == nil {
			break
		}

		return e.complexity.StageMetricResult.KpiID(childComplexity), true

	case "StageMetricResult.kpiName":
		if e.complexity.StageMetricResult.KpiName == nil {
			break
		}

		return e.complexity.StageMetricResult.KpiName(childComplexity), true

	case "StageMetricResult.rawData":
		if e.complexity.StageMetricResult.RawData == nil {
			break
		}

		return e.complexity.StageMetricResult.RawData(childComplexity), true

	case "StageMetricResult.value":
		if e.complexity.StageMetricResult.Value == nil {
			break
		}

		return e.complexity.StageMetricResult.Value(childComplexity), true

	case "StagePerformance.benchmark":
		if e.complexity.StagePerformance.Benchmark == nil {
			break
		}

		return e.complexity.StagePerformance.Benchmark(childComplexity), true

	case "StagePerformance.completionStatus":
		if e.complexity.StagePerformance.CompletionStatus == nil {
			break
		}

		return e.complexity.StagePerformance.CompletionStatus(childComplexity), true

	case "StagePerformance.metrics":
		if e.complexity.StagePerformance.Metrics == nil {
			break
		}

		return e.complexity.StagePerformance.Metrics(childComplexity), true

	case "StagePerformance.optimalTime":
		if e.complexity.StagePerformance.OptimalTime == nil {
			break
		}

		return e.complexity.StagePerformance.OptimalTime(childComplexity), true

	case "StagePerformance.score":
		if e.complexity.StagePerformance.Score == nil {
			break
		}

		return e.complexity.StagePerformance.Score(childComplexity), true

	case "StagePerformance.stageId":
		if e.complexity.StagePerformance.StageID == nil {
			break
		}

		return e.complexity.StagePerformance.StageID(childComplexity), true

	case "StagePerformance.stageName":
		if e.complexity.StagePerformance.StageName == nil {
			break
		}

		return e.complexity.StagePerformance.StageName(childComplexity), true

	case "StagePerformance.timeTaken":
		if e.complexity.StagePerformance.TimeTaken == nil {
			break
		}

		return e.complexity.StagePerformance.TimeTaken(childComplexity), true

	case "Subscription.competenceCreated":
		if e.complexity.Subscription.CompetenceCreated == nil {
			break
		}

		args, err := ec.field_Subscription_competenceCreated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.CompetenceCreated(childComplexity, args["gameId"].(*string)), true

	case "Subscription.competenceDeleted":
		if e.complexity.Subscription.CompetenceDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_competenceDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.CompetenceDeleted(childComplexity, args["competenceId"].(*string)), true

	case "Subscription.competenceMetricCreated":
		if e.complexity.Subscription.CompetenceMetricCreated == nil {
			break
		}

		args, err := ec.field_Subscription_competenceMetricCreated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.CompetenceMetricCreated(childComplexity, args["competenceId"].(*string)), true

	case "Subscription.competenceMetricDeleted":
		if e.complexity.Subscription.CompetenceMetricDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_competenceMetricDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.CompetenceMetricDeleted(childComplexity, args["metricId"].(*string)), true

	case "Subscription.competenceMetricUpdated":
		if e.complexity.Subscription.CompetenceMetricUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_competenceMetricUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.CompetenceMetricUpdated(childComplexity, args["metricId"].(*string)), true

	case "Subscription.competenceUpdated":
		if e.complexity.Subscription.CompetenceUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_competenceUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.CompetenceUpdated(childComplexity, args["competenceId"].(*string)), true

	case "Subscription.constantParameterCreated":
		if e.complexity.Subscription.ConstantParameterCreated == nil {
			break
		}

		args, err := ec.field_Subscription_constantParameterCreated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ConstantParameterCreated(childComplexity, args["gameId"].(*string)), true

	case "Subscription.constantParameterDeleted":
		if e.complexity.Subscription.ConstantParameterDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_constantParameterDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ConstantParameterDeleted(childComplexity, args["constId"].(*string)), true

	case "Subscription.constantParameterUpdated":
		if e.complexity.Subscription.ConstantParameterUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_constantParameterUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ConstantParameterUpdated(childComplexity, args["constId"].(*string)), true

	case "Subscription.gameCreated":
		if e.complexity.Subscription.GameCreated == nil {
			break
		}

		return e.complexity.Subscription.GameCreated(childComplexity), true

	case "Subscription.gameDeleted":
		if e.complexity.Subscription.GameDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_gameDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameDeleted(childComplexity, args["gameId"].(*string)), true

	case "Subscription.gameMetricCreated":
		if e.complexity.Subscription.GameMetricCreated == nil {
			break
		}

		args, err := ec.field_Subscription_gameMetricCreated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameMetricCreated(childComplexity, args["gameId"].(*string)), true

	case "Subscription.gameMetricDeleted":
		if e.complexity.Subscription.GameMetricDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_gameMetricDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameMetricDeleted(childComplexity, args["metricId"].(*string)), true

	case "Subscription.gameMetricParameterCreated":
		if e.complexity.Subscription.GameMetricParameterCreated == nil {
			break
		}

		args, err := ec.field_Subscription_gameMetricParameterCreated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameMetricParameterCreated(childComplexity, args["metricId"].(*string)), true

	case "Subscription.gameMetricParameterDeleted":
		if e.complexity.Subscription.GameMetricParameterDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_gameMetricParameterDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameMetricParameterDeleted(childComplexity, args["paramId"].(*string)), true

	case "Subscription.gameMetricParameterUpdated":
		if e.complexity.Subscription.GameMetricParameterUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_gameMetricParameterUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameMetricParameterUpdated(childComplexity, args["paramId"].(*string)), true

	case "Subscription.gameMetricUpdated":
		if e.complexity.Subscription.GameMetricUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_gameMetricUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameMetricUpdated(childComplexity, args["metricId"].(*string)), true

	case "Subscription.gameUpdated":
		if e.complexity.Subscription.GameUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_gameUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.GameUpdated(childComplexity, args["gameId"].(*string)), true

	case "Subscription.metricAssignedToStage":
		if e.complexity.Subscription.MetricAssignedToStage == nil {
			break
		}

		args, err := ec.field_Subscription_metricAssignedToStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MetricAssignedToStage(childComplexity, args["stageId"].(*string), args["metricId"].(*string)), true

	case "Subscription.metricParameterCreated":
		if e.complexity.Subscription.MetricParameterCreated == nil {
			break
		}

		args, err := ec.field_Subscription_metricParameterCreated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MetricParameterCreated(childComplexity, args["metricId"].(*string)), true

	case "Subscription.metricParameterDeleted":
		if e.complexity.Subscription.MetricParameterDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_metricParameterDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MetricParameterDeleted(childComplexity, args["paramId"].(*string)), true

	case "Subscription.metricParameterUpdated":
		if e.complexity.Subscription.MetricParameterUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_metricParameterUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MetricParameterUpdated(childComplexity, args["paramId"].(*string)), true

	case "Subscription.metricRemovedFromStage":
		if e.complexity.Subscription.MetricRemovedFromStage == nil {
			break
		}

		args, err := ec.field_Subscription_metricRemovedFromStage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MetricRemovedFromStage(childComplexity, args["stageId"].(*string), args["metricId"].(*string)), true

	case "Subscription.playerPerformanceCalculated":
		if e.complexity.Subscription.PlayerPerformanceCalculated == nil {
			break
		}

		args, err := ec.field_Subscription_playerPerformanceCalculated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.PlayerPerformanceCalculated(childComplexity, args["playerId"].(*string), args["gameId"].(*string)), true

	case "Subscription.stageCreated":
		if e.complexity.Subscription.StageCreated == nil {
			break
		}

		args, err := ec.field_Subscription_stageCreated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.StageCreated(childComplexity, args["gameId"].(*string)), true

	case "Subscription.stageDeleted":
		if e.complexity.Subscription.StageDeleted == nil {
			break
		}

		args, err := ec.field_Subscription_stageDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.StageDeleted(childComplexity, args["stageId"].(*string)), true

	case "Subscription.stageUpdated":
		if e.complexity.Subscription.StageUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_stageUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.StageUpdated(childComplexity, args["stageId"].(*string)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCompetenceInput,
		ec.unmarshalInputCompetenceMetricInput,
		ec.unmarshalInputCompetenceMetricUpdateInput,
		ec.unmarshalInputCompetenceUpdateInput,
		ec.unmarshalInputConstantParameterInput,
		ec.unmarshalInputConstantParameterUpdateInput,
		ec.unmarshalInputGameInput,
		ec.unmarshalInputGameMetricInput,
		ec.unmarshalInputGameMetricParameterInput,
		ec.unmarshalInputGameMetricParameterUpdateInput,
		ec.unmarshalInputGameMetricUpdateInput,
		ec.unmarshalInputGameUpdateInput,
		ec.unmarshalInputMetricParameterInput,
		ec.unmarshalInputMetricParameterUpdateInput,
		ec.unmarshalInputParameterValueInput,
		ec.unmarshalInputPlayerPerformanceInput,
		ec.unmarshalInputStageInput,
		ec.unmarshalInputStageMetricInput,
		ec.unmarshalInputStageParametersInput,
		ec.unmarshalInputStageUpdateInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, opCtx.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../schema-ql/input.graphqls", Input: `# Input Types
input GameInput {
  gameName: String!
  description: String
  active: Boolean
}

input GameUpdateInput {
  gameId: ID!
  gameName: String
  description: String
  active: Boolean
}

input CompetenceInput {
  gameId: ID!
  competenceKey: String!
  competenceName: String!
  benchmark: Float
  description: String
  weight: Float
}

input CompetenceUpdateInput {
  competenceId: ID!
  competenceKey: String
  competenceName: String
  benchmark: Float
  description: String
  weight: Float
}

input CompetenceMetricInput {
  competenceId: ID!
  metricKey: String!
  metricName: String!
  metricDescription: String
  benchmark: Float
  formula: String!
  weight: Float
}

input CompetenceMetricUpdateInput {
  metricId: ID!
  metricKey: String
  metricName: String
  metricDescription: String
  benchmark: Float
  formula: String
  weight: Float
}

input MetricParameterInput {
  metricId: ID!
  paramKey: String!
  paramName: String!
  paramDescription: String
  paramType: ParameterType!
  isRequired: Boolean
  defaultValue: String
  description: String
}

input MetricParameterUpdateInput {
  paramId: ID!
  paramKey: String
  paramName: String
  paramDescription: String
  paramType: ParameterType
  isRequired: Boolean
  defaultValue: String
  description: String
}

input StageInput {
  gameId: ID!
  stageKey: String!
  stageName: String!
  stageOrder: Int!
  benchmark: Float
  description: String
  optimalTime: Int
}

input StageUpdateInput {
  stageId: ID!
  stageKey: String
  stageName: String
  stageOrder: Int
  benchmark: Float
  description: String
  optimalTime: Int
}

input StageMetricInput {
  stageId: ID!
  metricId: ID!
}

input GameMetricInput {
  gameId: ID!
  metricKey: String!
  metricName: String!
  metricDescription: String
  benchmark: String
  formula: String!
  description: String
}

input GameMetricUpdateInput {
  metricId: ID!
  metricKey: String
  metricName: String
  metricDescription: String
  benchmark: String
  formula: String
  description: String
}

input GameMetricParameterInput {
  metricId: ID!
  paramKey: String!
  paramName: String!
  paramDescription: String
  paramType: ParameterType!
  isRequired: Boolean
  defaultValue: String
  description: String
}

input GameMetricParameterUpdateInput {
  paramId: ID!
  paramKey: String
  paramName: String
  paramDescription: String
  paramType: ParameterType
  isRequired: Boolean
  defaultValue: String
  description: String
}

input ConstantParameterInput {
  gameId: ID!
  constKey: String!
  constName: String!
  constDescription: String
  constValue: Float!
  description: String
}

input ConstantParameterUpdateInput {
  constId: ID!
  constKey: String
  constName: String
  constDescription: String
  constValue: Float
  description: String
}

# Player Performance Input
input PlayerPerformanceInput {
  playerId: ID!
  playerName: String!
  profileType: String
  gameId: ID!
  stageParameters: [StageParametersInput!]!
}

input StageParametersInput {
  stageId: ID!
  parameters: [ParameterValueInput!]!
  timeTaken: Float!
}

input ParameterValueInput {
  paramId: ID!
  value: JSON!
}`, BuiltIn: false},
	{Name: "../../schema-ql/mutations.graphqls", Input: `
# Mutations
type Mutation {
  # Admin Mutations
  createGame(input: GameInput!): Game
  updateGame(input: GameUpdateInput!): Game
  deleteGame(gameId: ID!): Boolean

  createCompetence(input: CompetenceInput!): Competence
  updateCompetence(input: CompetenceUpdateInput!): Competence
  deleteCompetence(competenceId: ID!): Boolean

  createCompetenceMetric(input: CompetenceMetricInput!): CompetenceMetric
  updateCompetenceMetric(input: CompetenceMetricUpdateInput!): CompetenceMetric
  deleteCompetenceMetric(metricId: ID!): Boolean

  createMetricParameter(input: MetricParameterInput!): MetricParameter
  updateMetricParameter(input: MetricParameterUpdateInput!): MetricParameter
  deleteMetricParameter(paramId: ID!): Boolean

  createStage(input: StageInput!): Stage
  updateStage(input: StageUpdateInput!): Stage
  deleteStage(stageId: ID!): Boolean

  assignMetricToStage(input: StageMetricInput!): Boolean
  removeMetricFromStage(input: StageMetricInput!): Boolean

  createGameMetric(input: GameMetricInput!): GameMetric
  updateGameMetric(input: GameMetricUpdateInput!): GameMetric
  deleteGameMetric(metricId: ID!): Boolean

  createGameMetricParameter(input: GameMetricParameterInput!): GameMetricParameter
  updateGameMetricParameter(input: GameMetricParameterUpdateInput!): GameMetricParameter
  deleteGameMetricParameter(paramId: ID!): Boolean

  createConstantParameter(input: ConstantParameterInput!): ConstantParameter
  updateConstantParameter(input: ConstantParameterUpdateInput!): ConstantParameter
  deleteConstantParameter(constId: ID!): Boolean

  # Player Mutations
  calculatePlayerPerformance(input: PlayerPerformanceInput!): PlayerPerformance
}`, BuiltIn: false},
	{Name: "../../schema-ql/query.graphqls", Input: `# Queries
type Query {
  # Admin Queries
  getGames: [Game]
  getGameById(gameId: ID!): Game
  getCompetenciesByGame(gameId: ID!): [Competence]
  getCompetenceById(competenceId: ID!): Competence
  getMetricsByCompetence(competenceId: ID!): [CompetenceMetric]
  getMetricById(metricId: ID!): CompetenceMetric
  getParametersByMetric(metricId: ID!): [MetricParameter]
  getStagesByGame(gameId: ID!): [Stage]
  getStageById(stageId: ID!): Stage
  getMetricsByStage(stageId: ID!): [CompetenceMetric]
  getGameMetricsByGame(gameId: ID!): [GameMetric]
  getGameMetricById(metricId: ID!): GameMetric
  getParametersByGameMetric(metricId: ID!): [GameMetricParameter]
  getConstantsByGame(gameId: ID!): [ConstantParameter]
  getConstantById(constId: ID!): ConstantParameter

  # Player Queries
  getGameConfiguration(gameId: ID!): Game
  getRequiredParametersForGame(gameId: ID!): [Stage]
  getRequiredParametersForStage(stageId: ID!): [MetricParameter]
  getGameFormulas(gameId: ID!): Game
  getBenchmarkData(gameId: ID!): Game
}
`, BuiltIn: false},
	{Name: "../../schema-ql/schema.graphqls", Input: `# Base Types
type Game {
  gameId: ID!
  gameName: String
  description: String
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  competencies: [Competence]
  stages: [Stage]
  gameMetrics: [GameMetric]
  constantParameters: [ConstantParameter]
}

type Competence {
  competenceId: ID!
  gameId: ID
  competenceKey: String
  competenceName: String
  benchmark: Float
  description: String
  weight: Float
  createdAt: DateTime
  updatedAt: DateTime
  metrics: [CompetenceMetric]
  game: Game
}

type CompetenceMetric {
  metricId: ID!
  competenceId: ID
  metricKey: String
  metricName: String
  metricDescription: String
  benchmark: Float
  formula: String
  weight: Float
  createdAt: DateTime
  updatedAt: DateTime
  parameters: [MetricParameter]
  competence: Competence
  stages: [Stage]
}

type MetricParameter {
  paramId: ID!
  metricId: ID
  paramKey: String
  paramName: String
  paramDescription: String
  paramType: ParameterType
  isRequired: Boolean
  defaultValue: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  metric: CompetenceMetric
}

type Stage {
  stageId: ID!
  gameId: ID
  stageKey: String
  stageName: String
  stageOrder: Int
  benchmark: Float
  description: String
  optimalTime: Int
  createdAt: DateTime
  updatedAt: DateTime
  metrics: [CompetenceMetric]
  game: Game
}

type GameMetric {
  metricId: ID!
  gameId: ID
  metricKey: String
  metricName: String
  metricDescription: String
  benchmark: String
  formula: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  parameters: [GameMetricParameter]
  game: Game
}

type GameMetricParameter {
  paramId: ID!
  metricId: ID
  paramKey: String
  paramName: String
  paramDescription: String
  paramType: ParameterType
  isRequired: Boolean
  defaultValue: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  metric: GameMetric
}

type ConstantParameter {
  constId: ID!
  gameId: ID
  constKey: String
  constName: String
  constDescription: String
  constValue: Float
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  game: Game
}

enum ParameterType {
  INTEGER
  DECIMAL
  BOOLEAN
  STRING
  CONSTANT
  GLOBAL
}

# Player Performance Types
type PlayerPerformance {
  playerId: ID!
  playerName: String
  profileType: String
  gameDate: DateTime
  gameId: ID!
  totalScore: Float
  totalTimeTaken: Float
  competenceDetails: [CompetenceDetail]
  stagePerformance: [StagePerformance]
  globalMetrics: GlobalMetrics
  benchmarkComparison: BenchmarkComparison
}

type CompetenceDetail {
  competenceKey: String!
  name: String
  score: Float
  benchmark: Float
  weight: Float
  metrics: [MetricResult]
}

type MetricResult {
  kpiId: String!
  kpiName: String
  value: Float
  benchmark: Float
}

type StagePerformance {
  stageId: ID!
  stageName: String
  metrics: [StageMetricResult]
  timeTaken: Float
  optimalTime: Float
  score: Float
  benchmark: Float
  completionStatus: String
}

type StageMetricResult {
  kpiId: String!
  kpiName: String
  category: String
  value: Float
  benchmark: Float
  formula: String
  rawData: JSON
}

type GlobalMetrics {
  timeEfficiency: GlobalMetricResult
  autonomy: GlobalMetricResult
  errorRecovery: GlobalMetricResult
  stressPerformance: GlobalMetricResult
  consistency: GlobalMetricResult
  adaptability: GlobalMetricResult
}

type GlobalMetricResult {
  value: Float
  formula: String
}

type BenchmarkComparison {
  percentileRank: Int
  relativeToBenchmark: String
  benchmarkScore: Float
}

# Custom scalar for JSON data
scalar JSON
scalar DateTime`, BuiltIn: false},
	{Name: "../../schema-ql/subscription.graphqls", Input: `# Subscriptions
type Subscription {
  # Game Subscriptions
  gameCreated: Game
  gameUpdated(gameId: ID): Game
  gameDeleted(gameId: ID): ID
  
  # Competence Subscriptions
  competenceCreated(gameId: ID): Competence
  competenceUpdated(competenceId: ID): Competence
  competenceDeleted(competenceId: ID): ID
  
  # CompetenceMetric Subscriptions
  competenceMetricCreated(competenceId: ID): CompetenceMetric
  competenceMetricUpdated(metricId: ID): CompetenceMetric
  competenceMetricDeleted(metricId: ID): ID
  
  # MetricParameter Subscriptions
  metricParameterCreated(metricId: ID): MetricParameter
  metricParameterUpdated(paramId: ID): MetricParameter
  metricParameterDeleted(paramId: ID): ID
  
  # Stage Subscriptions
  stageCreated(gameId: ID): Stage
  stageUpdated(stageId: ID): Stage
  stageDeleted(stageId: ID): ID
  
  # Stage-Metric Relationship Subscriptions
  metricAssignedToStage(stageId: ID, metricId: ID): Boolean
  metricRemovedFromStage(stageId: ID, metricId: ID): Boolean
  
  # GameMetric Subscriptions
  gameMetricCreated(gameId: ID): GameMetric
  gameMetricUpdated(metricId: ID): GameMetric
  gameMetricDeleted(metricId: ID): ID
  
  # GameMetricParameter Subscriptions
  gameMetricParameterCreated(metricId: ID): GameMetricParameter
  gameMetricParameterUpdated(paramId: ID): GameMetricParameter
  gameMetricParameterDeleted(paramId: ID): ID
  
  # ConstantParameter Subscriptions
  constantParameterCreated(gameId: ID): ConstantParameter
  constantParameterUpdated(constId: ID): ConstantParameter
  constantParameterDeleted(constId: ID): ID
  
  # Player Performance Subscriptions
  playerPerformanceCalculated(playerId: ID, gameId: ID): PlayerPerformance
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_assignMetricToStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_assignMetricToStage_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_assignMetricToStage_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StageMetricInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNStageMetricInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageMetricInput(ctx, tmp)
	}

	var zeroVal model.StageMetricInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_calculatePlayerPerformance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_calculatePlayerPerformance_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_calculatePlayerPerformance_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.PlayerPerformanceInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNPlayerPerformanceInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐPlayerPerformanceInput(ctx, tmp)
	}

	var zeroVal model.PlayerPerformanceInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCompetenceMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createCompetenceMetric_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCompetenceMetric_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CompetenceMetricInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCompetenceMetricInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceMetricInput(ctx, tmp)
	}

	var zeroVal model.CompetenceMetricInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCompetence_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createCompetence_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCompetence_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CompetenceInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCompetenceInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceInput(ctx, tmp)
	}

	var zeroVal model.CompetenceInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createConstantParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createConstantParameter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createConstantParameter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConstantParameterInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNConstantParameterInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐConstantParameterInput(ctx, tmp)
	}

	var zeroVal model.ConstantParameterInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createGameMetricParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createGameMetricParameter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createGameMetricParameter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.GameMetricParameterInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNGameMetricParameterInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricParameterInput(ctx, tmp)
	}

	var zeroVal model.GameMetricParameterInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createGameMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createGameMetric_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createGameMetric_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.GameMetricInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNGameMetricInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricInput(ctx, tmp)
	}

	var zeroVal model.GameMetricInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createGame_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createGame_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.GameInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNGameInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameInput(ctx, tmp)
	}

	var zeroVal model.GameInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createMetricParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createMetricParameter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createMetricParameter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.MetricParameterInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNMetricParameterInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameterInput(ctx, tmp)
	}

	var zeroVal model.MetricParameterInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createStage_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createStage_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StageInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNStageInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageInput(ctx, tmp)
	}

	var zeroVal model.StageInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCompetenceMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteCompetenceMetric_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCompetenceMetric_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCompetence_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteCompetence_argsCompetenceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["competenceId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCompetence_argsCompetenceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
	if tmp, ok := rawArgs["competenceId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteConstantParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteConstantParameter_argsConstID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["constId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteConstantParameter_argsConstID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("constId"))
	if tmp, ok := rawArgs["constId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteGameMetricParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteGameMetricParameter_argsParamID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paramId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteGameMetricParameter_argsParamID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
	if tmp, ok := rawArgs["paramId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteGameMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteGameMetric_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteGameMetric_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteGame_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteGame_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteMetricParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteMetricParameter_argsParamID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paramId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteMetricParameter_argsParamID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
	if tmp, ok := rawArgs["paramId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteStage_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteStage_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_removeMetricFromStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_removeMetricFromStage_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_removeMetricFromStage_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StageMetricInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNStageMetricInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageMetricInput(ctx, tmp)
	}

	var zeroVal model.StageMetricInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompetenceMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateCompetenceMetric_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCompetenceMetric_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CompetenceMetricUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCompetenceMetricUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceMetricUpdateInput(ctx, tmp)
	}

	var zeroVal model.CompetenceMetricUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompetence_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateCompetence_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCompetence_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CompetenceUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCompetenceUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceUpdateInput(ctx, tmp)
	}

	var zeroVal model.CompetenceUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateConstantParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateConstantParameter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateConstantParameter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConstantParameterUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNConstantParameterUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐConstantParameterUpdateInput(ctx, tmp)
	}

	var zeroVal model.ConstantParameterUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateGameMetricParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateGameMetricParameter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateGameMetricParameter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.GameMetricParameterUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNGameMetricParameterUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricParameterUpdateInput(ctx, tmp)
	}

	var zeroVal model.GameMetricParameterUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateGameMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateGameMetric_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateGameMetric_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.GameMetricUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNGameMetricUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricUpdateInput(ctx, tmp)
	}

	var zeroVal model.GameMetricUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateGame_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateGame_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.GameUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNGameUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameUpdateInput(ctx, tmp)
	}

	var zeroVal model.GameUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateMetricParameter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateMetricParameter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateMetricParameter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.MetricParameterUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNMetricParameterUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameterUpdateInput(ctx, tmp)
	}

	var zeroVal model.MetricParameterUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateStage_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateStage_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StageUpdateInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNStageUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageUpdateInput(ctx, tmp)
	}

	var zeroVal model.StageUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getBenchmarkData_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getBenchmarkData_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getBenchmarkData_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getCompetenceById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getCompetenceById_argsCompetenceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["competenceId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getCompetenceById_argsCompetenceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
	if tmp, ok := rawArgs["competenceId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getCompetenciesByGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getCompetenciesByGame_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getCompetenciesByGame_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getConstantById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getConstantById_argsConstID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["constId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getConstantById_argsConstID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("constId"))
	if tmp, ok := rawArgs["constId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getConstantsByGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getConstantsByGame_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getConstantsByGame_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getGameById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getGameById_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getGameById_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getGameConfiguration_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getGameConfiguration_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getGameConfiguration_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getGameFormulas_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getGameFormulas_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getGameFormulas_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getGameMetricById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getGameMetricById_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getGameMetricById_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getGameMetricsByGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getGameMetricsByGame_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getGameMetricsByGame_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getMetricById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getMetricById_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getMetricById_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getMetricsByCompetence_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getMetricsByCompetence_argsCompetenceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["competenceId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getMetricsByCompetence_argsCompetenceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
	if tmp, ok := rawArgs["competenceId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getMetricsByStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getMetricsByStage_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getMetricsByStage_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getParametersByGameMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getParametersByGameMetric_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getParametersByGameMetric_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getParametersByMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getParametersByMetric_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getParametersByMetric_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getRequiredParametersForGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getRequiredParametersForGame_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getRequiredParametersForGame_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getRequiredParametersForStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getRequiredParametersForStage_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getRequiredParametersForStage_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getStageById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getStageById_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getStageById_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_getStagesByGame_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_getStagesByGame_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_getStagesByGame_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalNID2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_competenceCreated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_competenceCreated_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_competenceCreated_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_competenceDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_competenceDeleted_argsCompetenceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["competenceId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_competenceDeleted_argsCompetenceID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
	if tmp, ok := rawArgs["competenceId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_competenceMetricCreated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_competenceMetricCreated_argsCompetenceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["competenceId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_competenceMetricCreated_argsCompetenceID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
	if tmp, ok := rawArgs["competenceId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_competenceMetricDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_competenceMetricDeleted_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_competenceMetricDeleted_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_competenceMetricUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_competenceMetricUpdated_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_competenceMetricUpdated_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_competenceUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_competenceUpdated_argsCompetenceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["competenceId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_competenceUpdated_argsCompetenceID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
	if tmp, ok := rawArgs["competenceId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_constantParameterCreated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_constantParameterCreated_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_constantParameterCreated_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_constantParameterDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_constantParameterDeleted_argsConstID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["constId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_constantParameterDeleted_argsConstID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("constId"))
	if tmp, ok := rawArgs["constId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_constantParameterUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_constantParameterUpdated_argsConstID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["constId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_constantParameterUpdated_argsConstID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("constId"))
	if tmp, ok := rawArgs["constId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameDeleted_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameDeleted_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameMetricCreated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameMetricCreated_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameMetricCreated_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameMetricDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameMetricDeleted_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameMetricDeleted_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameMetricParameterCreated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameMetricParameterCreated_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameMetricParameterCreated_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameMetricParameterDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameMetricParameterDeleted_argsParamID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paramId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameMetricParameterDeleted_argsParamID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
	if tmp, ok := rawArgs["paramId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameMetricParameterUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameMetricParameterUpdated_argsParamID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paramId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameMetricParameterUpdated_argsParamID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
	if tmp, ok := rawArgs["paramId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameMetricUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameMetricUpdated_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameMetricUpdated_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_gameUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_gameUpdated_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_gameUpdated_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_metricAssignedToStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_metricAssignedToStage_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	arg1, err := ec.field_Subscription_metricAssignedToStage_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Subscription_metricAssignedToStage_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_metricAssignedToStage_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_metricParameterCreated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_metricParameterCreated_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_metricParameterCreated_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_metricParameterDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_metricParameterDeleted_argsParamID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paramId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_metricParameterDeleted_argsParamID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
	if tmp, ok := rawArgs["paramId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_metricParameterUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_metricParameterUpdated_argsParamID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["paramId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_metricParameterUpdated_argsParamID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
	if tmp, ok := rawArgs["paramId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_metricRemovedFromStage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_metricRemovedFromStage_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	arg1, err := ec.field_Subscription_metricRemovedFromStage_argsMetricID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["metricId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Subscription_metricRemovedFromStage_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_metricRemovedFromStage_argsMetricID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
	if tmp, ok := rawArgs["metricId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_playerPerformanceCalculated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_playerPerformanceCalculated_argsPlayerID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["playerId"] = arg0
	arg1, err := ec.field_Subscription_playerPerformanceCalculated_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg1
	return args, nil
}
func (ec *executionContext) field_Subscription_playerPerformanceCalculated_argsPlayerID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("playerId"))
	if tmp, ok := rawArgs["playerId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_playerPerformanceCalculated_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_stageCreated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_stageCreated_argsGameID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["gameId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_stageCreated_argsGameID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
	if tmp, ok := rawArgs["gameId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_stageDeleted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_stageDeleted_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_stageDeleted_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Subscription_stageUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Subscription_stageUpdated_argsStageID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["stageId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Subscription_stageUpdated_argsStageID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
	if tmp, ok := rawArgs["stageId"]; ok {
		return ec.unmarshalOID2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _BenchmarkComparison_percentileRank(ctx context.Context, field graphql.CollectedField, obj *model.BenchmarkComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BenchmarkComparison_percentileRank(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PercentileRank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BenchmarkComparison_percentileRank(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BenchmarkComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BenchmarkComparison_relativeToBenchmark(ctx context.Context, field graphql.CollectedField, obj *model.BenchmarkComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BenchmarkComparison_relativeToBenchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelativeToBenchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BenchmarkComparison_relativeToBenchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BenchmarkComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BenchmarkComparison_benchmarkScore(ctx context.Context, field graphql.CollectedField, obj *model.BenchmarkComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BenchmarkComparison_benchmarkScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BenchmarkScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BenchmarkComparison_benchmarkScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BenchmarkComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_competenceId(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_competenceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_competenceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_gameId(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_gameId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_gameId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_competenceKey(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_competenceKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetenceKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_competenceKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_competenceName(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_competenceName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetenceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_competenceName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_benchmark(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_description(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_weight(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_weight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Competence().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Competence().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_metrics(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competence_game(ctx context.Context, field graphql.CollectedField, obj *models.Competence) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competence_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Game)
	fc.Result = res
	return ec.marshalOGame2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competence_game(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceDetail_competenceKey(ctx context.Context, field graphql.CollectedField, obj *model.CompetenceDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceDetail_competenceKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetenceKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceDetail_competenceKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceDetail_name(ctx context.Context, field graphql.CollectedField, obj *model.CompetenceDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceDetail_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceDetail_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceDetail_score(ctx context.Context, field graphql.CollectedField, obj *model.CompetenceDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceDetail_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceDetail_score(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceDetail_benchmark(ctx context.Context, field graphql.CollectedField, obj *model.CompetenceDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceDetail_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceDetail_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceDetail_weight(ctx context.Context, field graphql.CollectedField, obj *model.CompetenceDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceDetail_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceDetail_weight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceDetail_metrics(ctx context.Context, field graphql.CollectedField, obj *model.CompetenceDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceDetail_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MetricResult)
	fc.Result = res
	return ec.marshalOMetricResult2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceDetail_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kpiId":
				return ec.fieldContext_MetricResult_kpiId(ctx, field)
			case "kpiName":
				return ec.fieldContext_MetricResult_kpiName(ctx, field)
			case "value":
				return ec.fieldContext_MetricResult_value(ctx, field)
			case "benchmark":
				return ec.fieldContext_MetricResult_benchmark(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_metricId(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_metricId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_metricId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_competenceId(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_competenceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_metricKey(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_metricKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_metricName(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_metricName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_metricName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_metricDescription(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_metricDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_benchmark(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_formula(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_formula(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formula, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_formula(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_weight(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_weight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompetenceMetric().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompetenceMetric().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_parameters(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_parameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CompetenceMetric().Parameters(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MetricParameter)
	fc.Result = res
	return ec.marshalOMetricParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_parameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_MetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_MetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_MetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_MetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_MetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_MetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_MetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_MetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_MetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_MetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricParameter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_competence(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_competence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Competence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Competence)
	fc.Result = res
	return ec.marshalOCompetence2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_competence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetenceMetric_stages(ctx context.Context, field graphql.CollectedField, obj *models.CompetenceMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetenceMetric_stages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetenceMetric_stages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetenceMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_constId(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_constId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_constId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_gameId(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_gameId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_gameId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_constKey(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_constKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_constKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_constName(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_constName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_constName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_constDescription(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_constDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_constDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_constValue(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_constValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_constValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_description(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ConstantParameter().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ConstantParameter().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConstantParameter_game(ctx context.Context, field graphql.CollectedField, obj *models.ConstantParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConstantParameter_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Game)
	fc.Result = res
	return ec.marshalOGame2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConstantParameter_game(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConstantParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_gameId(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_gameId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_gameId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_gameName(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_gameName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_gameName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_description(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_active(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_active(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Game().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Game().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_competencies(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_competencies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Competencies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.Competence)
	fc.Result = res
	return ec.marshalOCompetence2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_competencies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_stages(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_stages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_stages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_gameMetrics(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_gameMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameMetrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.GameMetric)
	fc.Result = res
	return ec.marshalOGameMetric2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_gameMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_constantParameters(ctx context.Context, field graphql.CollectedField, obj *models.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_constantParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstantParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.ConstantParameter)
	fc.Result = res
	return ec.marshalOConstantParameter2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_constantParameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constId":
				return ec.fieldContext_ConstantParameter_constId(ctx, field)
			case "gameId":
				return ec.fieldContext_ConstantParameter_gameId(ctx, field)
			case "constKey":
				return ec.fieldContext_ConstantParameter_constKey(ctx, field)
			case "constName":
				return ec.fieldContext_ConstantParameter_constName(ctx, field)
			case "constDescription":
				return ec.fieldContext_ConstantParameter_constDescription(ctx, field)
			case "constValue":
				return ec.fieldContext_ConstantParameter_constValue(ctx, field)
			case "description":
				return ec.fieldContext_ConstantParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ConstantParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
			case "game":
				return ec.fieldContext_ConstantParameter_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConstantParameter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_metricId(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_metricId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_metricId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_gameId(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_gameId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_gameId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_metricKey(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_metricKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_metricKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_metricName(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_metricName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_metricName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_metricDescription(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_metricDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_metricDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_benchmark(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_formula(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_formula(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formula, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_formula(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_description(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameMetric().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameMetric().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_parameters(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_parameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.GameMetricParameter)
	fc.Result = res
	return ec.marshalOGameMetricParameter2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_parameters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_GameMetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_GameMetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_GameMetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_GameMetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_GameMetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_GameMetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_GameMetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_GameMetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_GameMetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_GameMetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetricParameter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetric_game(ctx context.Context, field graphql.CollectedField, obj *models.GameMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetric_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Game)
	fc.Result = res
	return ec.marshalOGame2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetric_game(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_paramId(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_paramId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_paramId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_metricId(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_metricId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_metricId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_paramKey(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_paramKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_paramKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_paramName(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_paramName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_paramName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_paramDescription(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_paramDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_paramDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_paramType(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_paramType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.ParameterType)
	fc.Result = res
	return ec.marshalOParameterType2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_paramType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParameterType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_isRequired(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_isRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_isRequired(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_defaultValue(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_description(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameMetricParameter().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameMetricParameter().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMetricParameter_metric(ctx context.Context, field graphql.CollectedField, obj *models.GameMetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMetricParameter_metric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metric, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.GameMetric)
	fc.Result = res
	return ec.marshalOGameMetric2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMetricParameter_metric(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetricResult_value(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetricResult_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetricResult_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetricResult_formula(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetricResult_formula(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formula, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetricResult_formula(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetrics_timeEfficiency(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetrics_timeEfficiency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeEfficiency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GlobalMetricResult)
	fc.Result = res
	return ec.marshalOGlobalMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetrics_timeEfficiency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_GlobalMetricResult_value(ctx, field)
			case "formula":
				return ec.fieldContext_GlobalMetricResult_formula(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalMetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetrics_autonomy(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetrics_autonomy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Autonomy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GlobalMetricResult)
	fc.Result = res
	return ec.marshalOGlobalMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetrics_autonomy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_GlobalMetricResult_value(ctx, field)
			case "formula":
				return ec.fieldContext_GlobalMetricResult_formula(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalMetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetrics_errorRecovery(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetrics_errorRecovery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorRecovery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GlobalMetricResult)
	fc.Result = res
	return ec.marshalOGlobalMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetrics_errorRecovery(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_GlobalMetricResult_value(ctx, field)
			case "formula":
				return ec.fieldContext_GlobalMetricResult_formula(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalMetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetrics_stressPerformance(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetrics_stressPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StressPerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GlobalMetricResult)
	fc.Result = res
	return ec.marshalOGlobalMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetrics_stressPerformance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_GlobalMetricResult_value(ctx, field)
			case "formula":
				return ec.fieldContext_GlobalMetricResult_formula(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalMetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetrics_consistency(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetrics_consistency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Consistency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GlobalMetricResult)
	fc.Result = res
	return ec.marshalOGlobalMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetrics_consistency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_GlobalMetricResult_value(ctx, field)
			case "formula":
				return ec.fieldContext_GlobalMetricResult_formula(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalMetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalMetrics_adaptability(ctx context.Context, field graphql.CollectedField, obj *model.GlobalMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalMetrics_adaptability(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adaptability, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GlobalMetricResult)
	fc.Result = res
	return ec.marshalOGlobalMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalMetrics_adaptability(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_GlobalMetricResult_value(ctx, field)
			case "formula":
				return ec.fieldContext_GlobalMetricResult_formula(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalMetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_paramId(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_paramId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_paramId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_metricId(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_metricId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetricID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_metricId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_paramKey(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_paramKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_paramKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_paramName(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_paramName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_paramName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_paramDescription(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_paramDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_paramDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_paramType(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_paramType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ParameterType)
	fc.Result = res
	return ec.marshalOParameterType2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_paramType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParameterType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_isRequired(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_isRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_isRequired(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_defaultValue(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_description(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricParameter_metric(ctx context.Context, field graphql.CollectedField, obj *model.MetricParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricParameter_metric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metric, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricParameter_metric(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricParameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_kpiId(ctx context.Context, field graphql.CollectedField, obj *model.MetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricResult_kpiId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricResult_kpiId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_kpiName(ctx context.Context, field graphql.CollectedField, obj *model.MetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricResult_kpiName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricResult_kpiName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_value(ctx context.Context, field graphql.CollectedField, obj *model.MetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricResult_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricResult_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_benchmark(ctx context.Context, field graphql.CollectedField, obj *model.MetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricResult_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricResult_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGame(rctx, fc.Args["input"].(model.GameInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGame(rctx, fc.Args["input"].(model.GameUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGame(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompetence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompetence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompetence(rctx, fc.Args["input"].(model.CompetenceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Competence)
	fc.Result = res
	return ec.marshalOCompetence2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompetence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompetence_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompetence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompetence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompetence(rctx, fc.Args["input"].(model.CompetenceUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Competence)
	fc.Result = res
	return ec.marshalOCompetence2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompetence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompetence_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCompetence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCompetence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompetence(rctx, fc.Args["competenceId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCompetence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCompetence_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompetenceMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompetenceMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompetenceMetric(rctx, fc.Args["input"].(model.CompetenceMetricInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompetenceMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompetenceMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompetenceMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompetenceMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompetenceMetric(rctx, fc.Args["input"].(model.CompetenceMetricUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompetenceMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompetenceMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCompetenceMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCompetenceMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompetenceMetric(rctx, fc.Args["metricId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCompetenceMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCompetenceMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMetricParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMetricParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMetricParameter(rctx, fc.Args["input"].(model.MetricParameterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetricParameter)
	fc.Result = res
	return ec.marshalOMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMetricParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_MetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_MetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_MetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_MetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_MetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_MetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_MetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_MetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_MetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_MetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMetricParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMetricParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMetricParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMetricParameter(rctx, fc.Args["input"].(model.MetricParameterUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetricParameter)
	fc.Result = res
	return ec.marshalOMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMetricParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_MetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_MetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_MetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_MetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_MetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_MetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_MetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_MetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_MetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_MetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMetricParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMetricParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMetricParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMetricParameter(rctx, fc.Args["paramId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMetricParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMetricParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateStage(rctx, fc.Args["input"].(model.StageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateStage(rctx, fc.Args["input"].(model.StageUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteStage(rctx, fc.Args["stageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignMetricToStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignMetricToStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignMetricToStage(rctx, fc.Args["input"].(model.StageMetricInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignMetricToStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignMetricToStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeMetricFromStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeMetricFromStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveMetricFromStage(rctx, fc.Args["input"].(model.StageMetricInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeMetricFromStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeMetricFromStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGameMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGameMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGameMetric(rctx, fc.Args["input"].(model.GameMetricInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.GameMetric)
	fc.Result = res
	return ec.marshalOGameMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGameMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGameMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGameMetric(rctx, fc.Args["input"].(model.GameMetricUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.GameMetric)
	fc.Result = res
	return ec.marshalOGameMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGameMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGameMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGameMetric(rctx, fc.Args["metricId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGameMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGameMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGameMetricParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGameMetricParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGameMetricParameter(rctx, fc.Args["input"].(model.GameMetricParameterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.GameMetricParameter)
	fc.Result = res
	return ec.marshalOGameMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGameMetricParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_GameMetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_GameMetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_GameMetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_GameMetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_GameMetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_GameMetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_GameMetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_GameMetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_GameMetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_GameMetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGameMetricParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameMetricParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameMetricParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGameMetricParameter(rctx, fc.Args["input"].(model.GameMetricParameterUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.GameMetricParameter)
	fc.Result = res
	return ec.marshalOGameMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameMetricParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_GameMetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_GameMetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_GameMetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_GameMetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_GameMetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_GameMetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_GameMetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_GameMetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_GameMetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_GameMetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameMetricParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGameMetricParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGameMetricParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGameMetricParameter(rctx, fc.Args["paramId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGameMetricParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGameMetricParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createConstantParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createConstantParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateConstantParameter(rctx, fc.Args["input"].(model.ConstantParameterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ConstantParameter)
	fc.Result = res
	return ec.marshalOConstantParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createConstantParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constId":
				return ec.fieldContext_ConstantParameter_constId(ctx, field)
			case "gameId":
				return ec.fieldContext_ConstantParameter_gameId(ctx, field)
			case "constKey":
				return ec.fieldContext_ConstantParameter_constKey(ctx, field)
			case "constName":
				return ec.fieldContext_ConstantParameter_constName(ctx, field)
			case "constDescription":
				return ec.fieldContext_ConstantParameter_constDescription(ctx, field)
			case "constValue":
				return ec.fieldContext_ConstantParameter_constValue(ctx, field)
			case "description":
				return ec.fieldContext_ConstantParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ConstantParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
			case "game":
				return ec.fieldContext_ConstantParameter_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConstantParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createConstantParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateConstantParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateConstantParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConstantParameter(rctx, fc.Args["input"].(model.ConstantParameterUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ConstantParameter)
	fc.Result = res
	return ec.marshalOConstantParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateConstantParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constId":
				return ec.fieldContext_ConstantParameter_constId(ctx, field)
			case "gameId":
				return ec.fieldContext_ConstantParameter_gameId(ctx, field)
			case "constKey":
				return ec.fieldContext_ConstantParameter_constKey(ctx, field)
			case "constName":
				return ec.fieldContext_ConstantParameter_constName(ctx, field)
			case "constDescription":
				return ec.fieldContext_ConstantParameter_constDescription(ctx, field)
			case "constValue":
				return ec.fieldContext_ConstantParameter_constValue(ctx, field)
			case "description":
				return ec.fieldContext_ConstantParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ConstantParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
			case "game":
				return ec.fieldContext_ConstantParameter_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConstantParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateConstantParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteConstantParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteConstantParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConstantParameter(rctx, fc.Args["constId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteConstantParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteConstantParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_calculatePlayerPerformance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_calculatePlayerPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CalculatePlayerPerformance(rctx, fc.Args["input"].(model.PlayerPerformanceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PlayerPerformance)
	fc.Result = res
	return ec.marshalOPlayerPerformance2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐPlayerPerformance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_calculatePlayerPerformance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "playerId":
				return ec.fieldContext_PlayerPerformance_playerId(ctx, field)
			case "playerName":
				return ec.fieldContext_PlayerPerformance_playerName(ctx, field)
			case "profileType":
				return ec.fieldContext_PlayerPerformance_profileType(ctx, field)
			case "gameDate":
				return ec.fieldContext_PlayerPerformance_gameDate(ctx, field)
			case "gameId":
				return ec.fieldContext_PlayerPerformance_gameId(ctx, field)
			case "totalScore":
				return ec.fieldContext_PlayerPerformance_totalScore(ctx, field)
			case "totalTimeTaken":
				return ec.fieldContext_PlayerPerformance_totalTimeTaken(ctx, field)
			case "competenceDetails":
				return ec.fieldContext_PlayerPerformance_competenceDetails(ctx, field)
			case "stagePerformance":
				return ec.fieldContext_PlayerPerformance_stagePerformance(ctx, field)
			case "globalMetrics":
				return ec.fieldContext_PlayerPerformance_globalMetrics(ctx, field)
			case "benchmarkComparison":
				return ec.fieldContext_PlayerPerformance_benchmarkComparison(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerPerformance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_calculatePlayerPerformance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_playerId(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_playerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_playerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_playerName(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_playerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_playerName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_profileType(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_profileType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_profileType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_gameDate(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_gameDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_gameDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_gameId(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_gameId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_gameId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_totalScore(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_totalScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_totalScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_totalTimeTaken(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_totalTimeTaken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTimeTaken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_totalTimeTaken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_competenceDetails(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_competenceDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetenceDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CompetenceDetail)
	fc.Result = res
	return ec.marshalOCompetenceDetail2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_competenceDetails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceKey":
				return ec.fieldContext_CompetenceDetail_competenceKey(ctx, field)
			case "name":
				return ec.fieldContext_CompetenceDetail_name(ctx, field)
			case "score":
				return ec.fieldContext_CompetenceDetail_score(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceDetail_benchmark(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceDetail_weight(ctx, field)
			case "metrics":
				return ec.fieldContext_CompetenceDetail_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_stagePerformance(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_stagePerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StagePerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StagePerformance)
	fc.Result = res
	return ec.marshalOStagePerformance2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStagePerformance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_stagePerformance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_StagePerformance_stageId(ctx, field)
			case "stageName":
				return ec.fieldContext_StagePerformance_stageName(ctx, field)
			case "metrics":
				return ec.fieldContext_StagePerformance_metrics(ctx, field)
			case "timeTaken":
				return ec.fieldContext_StagePerformance_timeTaken(ctx, field)
			case "optimalTime":
				return ec.fieldContext_StagePerformance_optimalTime(ctx, field)
			case "score":
				return ec.fieldContext_StagePerformance_score(ctx, field)
			case "benchmark":
				return ec.fieldContext_StagePerformance_benchmark(ctx, field)
			case "completionStatus":
				return ec.fieldContext_StagePerformance_completionStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StagePerformance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_globalMetrics(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_globalMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlobalMetrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GlobalMetrics)
	fc.Result = res
	return ec.marshalOGlobalMetrics2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_globalMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timeEfficiency":
				return ec.fieldContext_GlobalMetrics_timeEfficiency(ctx, field)
			case "autonomy":
				return ec.fieldContext_GlobalMetrics_autonomy(ctx, field)
			case "errorRecovery":
				return ec.fieldContext_GlobalMetrics_errorRecovery(ctx, field)
			case "stressPerformance":
				return ec.fieldContext_GlobalMetrics_stressPerformance(ctx, field)
			case "consistency":
				return ec.fieldContext_GlobalMetrics_consistency(ctx, field)
			case "adaptability":
				return ec.fieldContext_GlobalMetrics_adaptability(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerPerformance_benchmarkComparison(ctx context.Context, field graphql.CollectedField, obj *model.PlayerPerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerPerformance_benchmarkComparison(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BenchmarkComparison, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BenchmarkComparison)
	fc.Result = res
	return ec.marshalOBenchmarkComparison2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐBenchmarkComparison(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerPerformance_benchmarkComparison(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerPerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "percentileRank":
				return ec.fieldContext_BenchmarkComparison_percentileRank(ctx, field)
			case "relativeToBenchmark":
				return ec.fieldContext_BenchmarkComparison_relativeToBenchmark(ctx, field)
			case "benchmarkScore":
				return ec.fieldContext_BenchmarkComparison_benchmarkScore(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BenchmarkComparison", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getGames(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getGames(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGames(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Game)
	fc.Result = res
	return ec.marshalOGame2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getGames(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getGameById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getGameById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGameByID(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getGameById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getGameById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCompetenciesByGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCompetenciesByGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompetenciesByGame(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Competence)
	fc.Result = res
	return ec.marshalOCompetence2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCompetenciesByGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCompetenciesByGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCompetenceById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCompetenceById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompetenceByID(rctx, fc.Args["competenceId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Competence)
	fc.Result = res
	return ec.marshalOCompetence2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCompetenceById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCompetenceById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMetricsByCompetence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getMetricsByCompetence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMetricsByCompetence(rctx, fc.Args["competenceId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getMetricsByCompetence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMetricsByCompetence_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMetricById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getMetricById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMetricByID(rctx, fc.Args["metricId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getMetricById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMetricById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getParametersByMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getParametersByMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetParametersByMetric(rctx, fc.Args["metricId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MetricParameter)
	fc.Result = res
	return ec.marshalOMetricParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getParametersByMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_MetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_MetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_MetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_MetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_MetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_MetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_MetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_MetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_MetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_MetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getParametersByMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getStagesByGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getStagesByGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetStagesByGame(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getStagesByGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getStagesByGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getStageById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getStageById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetStageByID(rctx, fc.Args["stageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getStageById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getStageById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMetricsByStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getMetricsByStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMetricsByStage(rctx, fc.Args["stageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getMetricsByStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMetricsByStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getGameMetricsByGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getGameMetricsByGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGameMetricsByGame(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.GameMetric)
	fc.Result = res
	return ec.marshalOGameMetric2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getGameMetricsByGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getGameMetricsByGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getGameMetricById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getGameMetricById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGameMetricByID(rctx, fc.Args["metricId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.GameMetric)
	fc.Result = res
	return ec.marshalOGameMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getGameMetricById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getGameMetricById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getParametersByGameMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getParametersByGameMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetParametersByGameMetric(rctx, fc.Args["metricId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.GameMetricParameter)
	fc.Result = res
	return ec.marshalOGameMetricParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getParametersByGameMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_GameMetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_GameMetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_GameMetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_GameMetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_GameMetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_GameMetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_GameMetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_GameMetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_GameMetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_GameMetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getParametersByGameMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getConstantsByGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getConstantsByGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetConstantsByGame(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ConstantParameter)
	fc.Result = res
	return ec.marshalOConstantParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getConstantsByGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constId":
				return ec.fieldContext_ConstantParameter_constId(ctx, field)
			case "gameId":
				return ec.fieldContext_ConstantParameter_gameId(ctx, field)
			case "constKey":
				return ec.fieldContext_ConstantParameter_constKey(ctx, field)
			case "constName":
				return ec.fieldContext_ConstantParameter_constName(ctx, field)
			case "constDescription":
				return ec.fieldContext_ConstantParameter_constDescription(ctx, field)
			case "constValue":
				return ec.fieldContext_ConstantParameter_constValue(ctx, field)
			case "description":
				return ec.fieldContext_ConstantParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ConstantParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
			case "game":
				return ec.fieldContext_ConstantParameter_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConstantParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getConstantsByGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getConstantById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getConstantById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetConstantByID(rctx, fc.Args["constId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ConstantParameter)
	fc.Result = res
	return ec.marshalOConstantParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getConstantById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constId":
				return ec.fieldContext_ConstantParameter_constId(ctx, field)
			case "gameId":
				return ec.fieldContext_ConstantParameter_gameId(ctx, field)
			case "constKey":
				return ec.fieldContext_ConstantParameter_constKey(ctx, field)
			case "constName":
				return ec.fieldContext_ConstantParameter_constName(ctx, field)
			case "constDescription":
				return ec.fieldContext_ConstantParameter_constDescription(ctx, field)
			case "constValue":
				return ec.fieldContext_ConstantParameter_constValue(ctx, field)
			case "description":
				return ec.fieldContext_ConstantParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ConstantParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
			case "game":
				return ec.fieldContext_ConstantParameter_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConstantParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getConstantById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getGameConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getGameConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGameConfiguration(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getGameConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getGameConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRequiredParametersForGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getRequiredParametersForGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRequiredParametersForGame(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getRequiredParametersForGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRequiredParametersForGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRequiredParametersForStage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getRequiredParametersForStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRequiredParametersForStage(rctx, fc.Args["stageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MetricParameter)
	fc.Result = res
	return ec.marshalOMetricParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getRequiredParametersForStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_MetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_MetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_MetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_MetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_MetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_MetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_MetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_MetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_MetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_MetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRequiredParametersForStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getGameFormulas(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getGameFormulas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetGameFormulas(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getGameFormulas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getGameFormulas_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBenchmarkData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBenchmarkData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBenchmarkData(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBenchmarkData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getBenchmarkData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_stageId(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_stageId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_stageId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_gameId(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_gameId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_gameId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_stageKey(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_stageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_stageKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_stageName(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_stageName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StageName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_stageName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_stageOrder(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_stageOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Stage().StageOrder(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_stageOrder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_benchmark(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_description(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_optimalTime(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_optimalTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Stage().OptimalTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_optimalTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Stage().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Stage().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_metrics(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.CompetenceMetric)
	fc.Result = res
	return ec.marshalOCompetenceMetric2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stage_game(ctx context.Context, field graphql.CollectedField, obj *models.Stage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stage_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Game)
	fc.Result = res
	return ec.marshalOGame2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stage_game(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StageMetricResult_kpiId(ctx context.Context, field graphql.CollectedField, obj *model.StageMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StageMetricResult_kpiId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StageMetricResult_kpiId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StageMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StageMetricResult_kpiName(ctx context.Context, field graphql.CollectedField, obj *model.StageMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StageMetricResult_kpiName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KpiName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StageMetricResult_kpiName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StageMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StageMetricResult_category(ctx context.Context, field graphql.CollectedField, obj *model.StageMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StageMetricResult_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StageMetricResult_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StageMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StageMetricResult_value(ctx context.Context, field graphql.CollectedField, obj *model.StageMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StageMetricResult_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StageMetricResult_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StageMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StageMetricResult_benchmark(ctx context.Context, field graphql.CollectedField, obj *model.StageMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StageMetricResult_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StageMetricResult_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StageMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StageMetricResult_formula(ctx context.Context, field graphql.CollectedField, obj *model.StageMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StageMetricResult_formula(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formula, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StageMetricResult_formula(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StageMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StageMetricResult_rawData(ctx context.Context, field graphql.CollectedField, obj *model.StageMetricResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StageMetricResult_rawData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StageMetricResult_rawData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StageMetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_stageId(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_stageId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_stageId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_stageName(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_stageName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StageName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_stageName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_metrics(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StageMetricResult)
	fc.Result = res
	return ec.marshalOStageMetricResult2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageMetricResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kpiId":
				return ec.fieldContext_StageMetricResult_kpiId(ctx, field)
			case "kpiName":
				return ec.fieldContext_StageMetricResult_kpiName(ctx, field)
			case "category":
				return ec.fieldContext_StageMetricResult_category(ctx, field)
			case "value":
				return ec.fieldContext_StageMetricResult_value(ctx, field)
			case "benchmark":
				return ec.fieldContext_StageMetricResult_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_StageMetricResult_formula(ctx, field)
			case "rawData":
				return ec.fieldContext_StageMetricResult_rawData(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StageMetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_timeTaken(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_timeTaken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeTaken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_timeTaken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_optimalTime(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_optimalTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OptimalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_optimalTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_score(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_score(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_benchmark(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_benchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Benchmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_benchmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StagePerformance_completionStatus(ctx context.Context, field graphql.CollectedField, obj *model.StagePerformance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StagePerformance_completionStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StagePerformance_completionStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StagePerformance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameCreated(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.Game):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameCreated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameUpdated(rctx, fc.Args["gameId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.Game):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameId":
				return ec.fieldContext_Game_gameId(ctx, field)
			case "gameName":
				return ec.fieldContext_Game_gameName(ctx, field)
			case "description":
				return ec.fieldContext_Game_description(ctx, field)
			case "active":
				return ec.fieldContext_Game_active(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "competencies":
				return ec.fieldContext_Game_competencies(ctx, field)
			case "stages":
				return ec.fieldContext_Game_stages(ctx, field)
			case "gameMetrics":
				return ec.fieldContext_Game_gameMetrics(ctx, field)
			case "constantParameters":
				return ec.fieldContext_Game_constantParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameDeleted(rctx, fc.Args["gameId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_competenceCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_competenceCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().CompetenceCreated(rctx, fc.Args["gameId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.Competence):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOCompetence2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_competenceCreated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_competenceCreated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_competenceUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_competenceUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().CompetenceUpdated(rctx, fc.Args["competenceId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.Competence):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOCompetence2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_competenceUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "competenceId":
				return ec.fieldContext_Competence_competenceId(ctx, field)
			case "gameId":
				return ec.fieldContext_Competence_gameId(ctx, field)
			case "competenceKey":
				return ec.fieldContext_Competence_competenceKey(ctx, field)
			case "competenceName":
				return ec.fieldContext_Competence_competenceName(ctx, field)
			case "benchmark":
				return ec.fieldContext_Competence_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Competence_description(ctx, field)
			case "weight":
				return ec.fieldContext_Competence_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competence_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Competence_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Competence_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competence", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_competenceUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_competenceDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_competenceDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().CompetenceDeleted(rctx, fc.Args["competenceId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_competenceDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_competenceDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_competenceMetricCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_competenceMetricCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().CompetenceMetricCreated(rctx, fc.Args["competenceId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.CompetenceMetric):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_competenceMetricCreated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_competenceMetricCreated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_competenceMetricUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_competenceMetricUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().CompetenceMetricUpdated(rctx, fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.CompetenceMetric):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_competenceMetricUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_CompetenceMetric_metricId(ctx, field)
			case "competenceId":
				return ec.fieldContext_CompetenceMetric_competenceId(ctx, field)
			case "metricKey":
				return ec.fieldContext_CompetenceMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_CompetenceMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_CompetenceMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_CompetenceMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_CompetenceMetric_formula(ctx, field)
			case "weight":
				return ec.fieldContext_CompetenceMetric_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompetenceMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompetenceMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_CompetenceMetric_parameters(ctx, field)
			case "competence":
				return ec.fieldContext_CompetenceMetric_competence(ctx, field)
			case "stages":
				return ec.fieldContext_CompetenceMetric_stages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetenceMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_competenceMetricUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_competenceMetricDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_competenceMetricDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().CompetenceMetricDeleted(rctx, fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_competenceMetricDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_competenceMetricDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_metricParameterCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_metricParameterCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MetricParameterCreated(rctx, fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.MetricParameter):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_metricParameterCreated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_MetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_MetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_MetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_MetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_MetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_MetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_MetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_MetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_MetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_MetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_metricParameterCreated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_metricParameterUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_metricParameterUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MetricParameterUpdated(rctx, fc.Args["paramId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.MetricParameter):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_metricParameterUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_MetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_MetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_MetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_MetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_MetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_MetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_MetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_MetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_MetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_MetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_MetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_metricParameterUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_metricParameterDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_metricParameterDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MetricParameterDeleted(rctx, fc.Args["paramId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_metricParameterDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_metricParameterDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_stageCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_stageCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().StageCreated(rctx, fc.Args["gameId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.Stage):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOStage2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_stageCreated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_stageCreated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_stageUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_stageUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().StageUpdated(rctx, fc.Args["stageId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.Stage):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOStage2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_stageUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stageId":
				return ec.fieldContext_Stage_stageId(ctx, field)
			case "gameId":
				return ec.fieldContext_Stage_gameId(ctx, field)
			case "stageKey":
				return ec.fieldContext_Stage_stageKey(ctx, field)
			case "stageName":
				return ec.fieldContext_Stage_stageName(ctx, field)
			case "stageOrder":
				return ec.fieldContext_Stage_stageOrder(ctx, field)
			case "benchmark":
				return ec.fieldContext_Stage_benchmark(ctx, field)
			case "description":
				return ec.fieldContext_Stage_description(ctx, field)
			case "optimalTime":
				return ec.fieldContext_Stage_optimalTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_Stage_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Stage_updatedAt(ctx, field)
			case "metrics":
				return ec.fieldContext_Stage_metrics(ctx, field)
			case "game":
				return ec.fieldContext_Stage_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_stageUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_stageDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_stageDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().StageDeleted(rctx, fc.Args["stageId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_stageDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_stageDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_metricAssignedToStage(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_metricAssignedToStage(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MetricAssignedToStage(rctx, fc.Args["stageId"].(*string), fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *bool):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_metricAssignedToStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_metricAssignedToStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_metricRemovedFromStage(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_metricRemovedFromStage(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MetricRemovedFromStage(rctx, fc.Args["stageId"].(*string), fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *bool):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_metricRemovedFromStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_metricRemovedFromStage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameMetricCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameMetricCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameMetricCreated(rctx, fc.Args["gameId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.GameMetric):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOGameMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameMetricCreated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameMetricCreated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameMetricUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameMetricUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameMetricUpdated(rctx, fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.GameMetric):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOGameMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameMetricUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricId":
				return ec.fieldContext_GameMetric_metricId(ctx, field)
			case "gameId":
				return ec.fieldContext_GameMetric_gameId(ctx, field)
			case "metricKey":
				return ec.fieldContext_GameMetric_metricKey(ctx, field)
			case "metricName":
				return ec.fieldContext_GameMetric_metricName(ctx, field)
			case "metricDescription":
				return ec.fieldContext_GameMetric_metricDescription(ctx, field)
			case "benchmark":
				return ec.fieldContext_GameMetric_benchmark(ctx, field)
			case "formula":
				return ec.fieldContext_GameMetric_formula(ctx, field)
			case "description":
				return ec.fieldContext_GameMetric_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetric_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetric_updatedAt(ctx, field)
			case "parameters":
				return ec.fieldContext_GameMetric_parameters(ctx, field)
			case "game":
				return ec.fieldContext_GameMetric_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameMetricUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameMetricDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameMetricDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameMetricDeleted(rctx, fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameMetricDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameMetricDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameMetricParameterCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameMetricParameterCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameMetricParameterCreated(rctx, fc.Args["metricId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.GameMetricParameter):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOGameMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameMetricParameterCreated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_GameMetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_GameMetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_GameMetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_GameMetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_GameMetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_GameMetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_GameMetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_GameMetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_GameMetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_GameMetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameMetricParameterCreated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameMetricParameterUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameMetricParameterUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameMetricParameterUpdated(rctx, fc.Args["paramId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.GameMetricParameter):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOGameMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameMetricParameterUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paramId":
				return ec.fieldContext_GameMetricParameter_paramId(ctx, field)
			case "metricId":
				return ec.fieldContext_GameMetricParameter_metricId(ctx, field)
			case "paramKey":
				return ec.fieldContext_GameMetricParameter_paramKey(ctx, field)
			case "paramName":
				return ec.fieldContext_GameMetricParameter_paramName(ctx, field)
			case "paramDescription":
				return ec.fieldContext_GameMetricParameter_paramDescription(ctx, field)
			case "paramType":
				return ec.fieldContext_GameMetricParameter_paramType(ctx, field)
			case "isRequired":
				return ec.fieldContext_GameMetricParameter_isRequired(ctx, field)
			case "defaultValue":
				return ec.fieldContext_GameMetricParameter_defaultValue(ctx, field)
			case "description":
				return ec.fieldContext_GameMetricParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_GameMetricParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GameMetricParameter_updatedAt(ctx, field)
			case "metric":
				return ec.fieldContext_GameMetricParameter_metric(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMetricParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameMetricParameterUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_gameMetricParameterDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_gameMetricParameterDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GameMetricParameterDeleted(rctx, fc.Args["paramId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_gameMetricParameterDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_gameMetricParameterDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_constantParameterCreated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_constantParameterCreated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ConstantParameterCreated(rctx, fc.Args["gameId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.ConstantParameter):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOConstantParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_constantParameterCreated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constId":
				return ec.fieldContext_ConstantParameter_constId(ctx, field)
			case "gameId":
				return ec.fieldContext_ConstantParameter_gameId(ctx, field)
			case "constKey":
				return ec.fieldContext_ConstantParameter_constKey(ctx, field)
			case "constName":
				return ec.fieldContext_ConstantParameter_constName(ctx, field)
			case "constDescription":
				return ec.fieldContext_ConstantParameter_constDescription(ctx, field)
			case "constValue":
				return ec.fieldContext_ConstantParameter_constValue(ctx, field)
			case "description":
				return ec.fieldContext_ConstantParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ConstantParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
			case "game":
				return ec.fieldContext_ConstantParameter_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConstantParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_constantParameterCreated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_constantParameterUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_constantParameterUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ConstantParameterUpdated(rctx, fc.Args["constId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *models.ConstantParameter):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOConstantParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_constantParameterUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constId":
				return ec.fieldContext_ConstantParameter_constId(ctx, field)
			case "gameId":
				return ec.fieldContext_ConstantParameter_gameId(ctx, field)
			case "constKey":
				return ec.fieldContext_ConstantParameter_constKey(ctx, field)
			case "constName":
				return ec.fieldContext_ConstantParameter_constName(ctx, field)
			case "constDescription":
				return ec.fieldContext_ConstantParameter_constDescription(ctx, field)
			case "constValue":
				return ec.fieldContext_ConstantParameter_constValue(ctx, field)
			case "description":
				return ec.fieldContext_ConstantParameter_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_ConstantParameter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ConstantParameter_updatedAt(ctx, field)
			case "game":
				return ec.fieldContext_ConstantParameter_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConstantParameter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_constantParameterUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_constantParameterDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_constantParameterDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ConstantParameterDeleted(rctx, fc.Args["constId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_constantParameterDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_constantParameterDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_playerPerformanceCalculated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_playerPerformanceCalculated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().PlayerPerformanceCalculated(rctx, fc.Args["playerId"].(*string), fc.Args["gameId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.PlayerPerformance):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOPlayerPerformance2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐPlayerPerformance(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_playerPerformanceCalculated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "playerId":
				return ec.fieldContext_PlayerPerformance_playerId(ctx, field)
			case "playerName":
				return ec.fieldContext_PlayerPerformance_playerName(ctx, field)
			case "profileType":
				return ec.fieldContext_PlayerPerformance_profileType(ctx, field)
			case "gameDate":
				return ec.fieldContext_PlayerPerformance_gameDate(ctx, field)
			case "gameId":
				return ec.fieldContext_PlayerPerformance_gameId(ctx, field)
			case "totalScore":
				return ec.fieldContext_PlayerPerformance_totalScore(ctx, field)
			case "totalTimeTaken":
				return ec.fieldContext_PlayerPerformance_totalTimeTaken(ctx, field)
			case "competenceDetails":
				return ec.fieldContext_PlayerPerformance_competenceDetails(ctx, field)
			case "stagePerformance":
				return ec.fieldContext_PlayerPerformance_stagePerformance(ctx, field)
			case "globalMetrics":
				return ec.fieldContext_PlayerPerformance_globalMetrics(ctx, field)
			case "benchmarkComparison":
				return ec.fieldContext_PlayerPerformance_benchmarkComparison(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerPerformance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_playerPerformanceCalculated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCompetenceInput(ctx context.Context, obj any) (model.CompetenceInput, error) {
	var it model.CompetenceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "competenceKey", "competenceName", "benchmark", "description", "weight"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "competenceKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetenceKey = data
		case "competenceName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetenceName = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "weight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Weight = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompetenceMetricInput(ctx context.Context, obj any) (model.CompetenceMetricInput, error) {
	var it model.CompetenceMetricInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"competenceId", "metricKey", "metricName", "metricDescription", "benchmark", "formula", "weight"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "competenceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetenceID = data
		case "metricKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricKey = data
		case "metricName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricName = data
		case "metricDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricDescription = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "formula":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formula"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Formula = data
		case "weight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Weight = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompetenceMetricUpdateInput(ctx context.Context, obj any) (model.CompetenceMetricUpdateInput, error) {
	var it model.CompetenceMetricUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"metricId", "metricKey", "metricName", "metricDescription", "benchmark", "formula", "weight"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "metricId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricID = data
		case "metricKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricKey = data
		case "metricName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricName = data
		case "metricDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricDescription = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "formula":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formula"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Formula = data
		case "weight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Weight = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompetenceUpdateInput(ctx context.Context, obj any) (model.CompetenceUpdateInput, error) {
	var it model.CompetenceUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"competenceId", "competenceKey", "competenceName", "benchmark", "description", "weight"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "competenceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetenceID = data
		case "competenceKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetenceKey = data
		case "competenceName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competenceName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetenceName = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "weight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Weight = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstantParameterInput(ctx context.Context, obj any) (model.ConstantParameterInput, error) {
	var it model.ConstantParameterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "constKey", "constName", "constDescription", "constValue", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "constKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstKey = data
		case "constName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstName = data
		case "constDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstDescription = data
		case "constValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constValue"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstValue = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConstantParameterUpdateInput(ctx context.Context, obj any) (model.ConstantParameterUpdateInput, error) {
	var it model.ConstantParameterUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"constId", "constKey", "constName", "constDescription", "constValue", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "constId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstID = data
		case "constKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstKey = data
		case "constName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstName = data
		case "constDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstDescription = data
		case "constValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constValue"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstValue = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameInput(ctx context.Context, obj any) (model.GameInput, error) {
	var it model.GameInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameName", "description", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameName = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameMetricInput(ctx context.Context, obj any) (model.GameMetricInput, error) {
	var it model.GameMetricInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "metricKey", "metricName", "metricDescription", "benchmark", "formula", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "metricKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricKey = data
		case "metricName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricName = data
		case "metricDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricDescription = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "formula":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formula"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Formula = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameMetricParameterInput(ctx context.Context, obj any) (model.GameMetricParameterInput, error) {
	var it model.GameMetricParameterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"metricId", "paramKey", "paramName", "paramDescription", "paramType", "isRequired", "defaultValue", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "metricId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricID = data
		case "paramKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamKey = data
		case "paramName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamName = data
		case "paramDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamDescription = data
		case "paramType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramType"))
			data, err := ec.unmarshalNParameterType2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamType = data
		case "isRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRequired = data
		case "defaultValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultValue"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultValue = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameMetricParameterUpdateInput(ctx context.Context, obj any) (model.GameMetricParameterUpdateInput, error) {
	var it model.GameMetricParameterUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"paramId", "paramKey", "paramName", "paramDescription", "paramType", "isRequired", "defaultValue", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "paramId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamID = data
		case "paramKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamKey = data
		case "paramName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamName = data
		case "paramDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamDescription = data
		case "paramType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramType"))
			data, err := ec.unmarshalOParameterType2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamType = data
		case "isRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRequired = data
		case "defaultValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultValue"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultValue = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameMetricUpdateInput(ctx context.Context, obj any) (model.GameMetricUpdateInput, error) {
	var it model.GameMetricUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"metricId", "metricKey", "metricName", "metricDescription", "benchmark", "formula", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "metricId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricID = data
		case "metricKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricKey = data
		case "metricName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricName = data
		case "metricDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricDescription = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "formula":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formula"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Formula = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameUpdateInput(ctx context.Context, obj any) (model.GameUpdateInput, error) {
	var it model.GameUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "gameName", "description", "active"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "gameName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameName = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetricParameterInput(ctx context.Context, obj any) (model.MetricParameterInput, error) {
	var it model.MetricParameterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"metricId", "paramKey", "paramName", "paramDescription", "paramType", "isRequired", "defaultValue", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "metricId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricID = data
		case "paramKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamKey = data
		case "paramName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamName = data
		case "paramDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamDescription = data
		case "paramType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramType"))
			data, err := ec.unmarshalNParameterType2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamType = data
		case "isRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRequired = data
		case "defaultValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultValue"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultValue = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetricParameterUpdateInput(ctx context.Context, obj any) (model.MetricParameterUpdateInput, error) {
	var it model.MetricParameterUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"paramId", "paramKey", "paramName", "paramDescription", "paramType", "isRequired", "defaultValue", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "paramId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamID = data
		case "paramKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamKey = data
		case "paramName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamName = data
		case "paramDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamDescription = data
		case "paramType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramType"))
			data, err := ec.unmarshalOParameterType2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamType = data
		case "isRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRequired = data
		case "defaultValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultValue"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultValue = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParameterValueInput(ctx context.Context, obj any) (model.ParameterValueInput, error) {
	var it model.ParameterValueInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"paramId", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "paramId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paramId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParamID = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNJSON2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlayerPerformanceInput(ctx context.Context, obj any) (model.PlayerPerformanceInput, error) {
	var it model.PlayerPerformanceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"playerId", "playerName", "profileType", "gameId", "stageParameters"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "playerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlayerID = data
		case "playerName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlayerName = data
		case "profileType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileType = data
		case "gameId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "stageParameters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageParameters"))
			data, err := ec.unmarshalNStageParametersInput2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageParametersInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageParameters = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStageInput(ctx context.Context, obj any) (model.StageInput, error) {
	var it model.StageInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "stageKey", "stageName", "stageOrder", "benchmark", "description", "optimalTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "stageKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageKey = data
		case "stageName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageName = data
		case "stageOrder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageOrder"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageOrder = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "optimalTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optimalTime"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptimalTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStageMetricInput(ctx context.Context, obj any) (model.StageMetricInput, error) {
	var it model.StageMetricInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"stageId", "metricId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "stageId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageID = data
		case "metricId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStageParametersInput(ctx context.Context, obj any) (model.StageParametersInput, error) {
	var it model.StageParametersInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"stageId", "parameters", "timeTaken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "stageId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageID = data
		case "parameters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parameters"))
			data, err := ec.unmarshalNParameterValueInput2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐParameterValueInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Parameters = data
		case "timeTaken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeTaken"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeTaken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStageUpdateInput(ctx context.Context, obj any) (model.StageUpdateInput, error) {
	var it model.StageUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"stageId", "stageKey", "stageName", "stageOrder", "benchmark", "description", "optimalTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "stageId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageID = data
		case "stageKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageKey = data
		case "stageName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageName = data
		case "stageOrder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stageOrder"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.StageOrder = data
		case "benchmark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benchmark"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Benchmark = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "optimalTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optimalTime"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptimalTime = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var benchmarkComparisonImplementors = []string{"BenchmarkComparison"}

func (ec *executionContext) _BenchmarkComparison(ctx context.Context, sel ast.SelectionSet, obj *model.BenchmarkComparison) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, benchmarkComparisonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BenchmarkComparison")
		case "percentileRank":
			out.Values[i] = ec._BenchmarkComparison_percentileRank(ctx, field, obj)
		case "relativeToBenchmark":
			out.Values[i] = ec._BenchmarkComparison_relativeToBenchmark(ctx, field, obj)
		case "benchmarkScore":
			out.Values[i] = ec._BenchmarkComparison_benchmarkScore(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var competenceImplementors = []string{"Competence"}

func (ec *executionContext) _Competence(ctx context.Context, sel ast.SelectionSet, obj *models.Competence) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, competenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Competence")
		case "competenceId":
			out.Values[i] = ec._Competence_competenceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gameId":
			out.Values[i] = ec._Competence_gameId(ctx, field, obj)
		case "competenceKey":
			out.Values[i] = ec._Competence_competenceKey(ctx, field, obj)
		case "competenceName":
			out.Values[i] = ec._Competence_competenceName(ctx, field, obj)
		case "benchmark":
			out.Values[i] = ec._Competence_benchmark(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Competence_description(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._Competence_weight(ctx, field, obj)
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Competence_createdAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Competence_updatedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			out.Values[i] = ec._Competence_metrics(ctx, field, obj)
		case "game":
			out.Values[i] = ec._Competence_game(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var competenceDetailImplementors = []string{"CompetenceDetail"}

func (ec *executionContext) _CompetenceDetail(ctx context.Context, sel ast.SelectionSet, obj *model.CompetenceDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, competenceDetailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompetenceDetail")
		case "competenceKey":
			out.Values[i] = ec._CompetenceDetail_competenceKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CompetenceDetail_name(ctx, field, obj)
		case "score":
			out.Values[i] = ec._CompetenceDetail_score(ctx, field, obj)
		case "benchmark":
			out.Values[i] = ec._CompetenceDetail_benchmark(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._CompetenceDetail_weight(ctx, field, obj)
		case "metrics":
			out.Values[i] = ec._CompetenceDetail_metrics(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var competenceMetricImplementors = []string{"CompetenceMetric"}

func (ec *executionContext) _CompetenceMetric(ctx context.Context, sel ast.SelectionSet, obj *models.CompetenceMetric) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, competenceMetricImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompetenceMetric")
		case "metricId":
			out.Values[i] = ec._CompetenceMetric_metricId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "competenceId":
			out.Values[i] = ec._CompetenceMetric_competenceId(ctx, field, obj)
		case "metricKey":
			out.Values[i] = ec._CompetenceMetric_metricKey(ctx, field, obj)
		case "metricName":
			out.Values[i] = ec._CompetenceMetric_metricName(ctx, field, obj)
		case "metricDescription":
			out.Values[i] = ec._CompetenceMetric_metricDescription(ctx, field, obj)
		case "benchmark":
			out.Values[i] = ec._CompetenceMetric_benchmark(ctx, field, obj)
		case "formula":
			out.Values[i] = ec._CompetenceMetric_formula(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._CompetenceMetric_weight(ctx, field, obj)
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompetenceMetric_createdAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompetenceMetric_updatedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "parameters":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CompetenceMetric_parameters(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "competence":
			out.Values[i] = ec._CompetenceMetric_competence(ctx, field, obj)
		case "stages":
			out.Values[i] = ec._CompetenceMetric_stages(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var constantParameterImplementors = []string{"ConstantParameter"}

func (ec *executionContext) _ConstantParameter(ctx context.Context, sel ast.SelectionSet, obj *models.ConstantParameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constantParameterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConstantParameter")
		case "constId":
			out.Values[i] = ec._ConstantParameter_constId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gameId":
			out.Values[i] = ec._ConstantParameter_gameId(ctx, field, obj)
		case "constKey":
			out.Values[i] = ec._ConstantParameter_constKey(ctx, field, obj)
		case "constName":
			out.Values[i] = ec._ConstantParameter_constName(ctx, field, obj)
		case "constDescription":
			out.Values[i] = ec._ConstantParameter_constDescription(ctx, field, obj)
		case "constValue":
			out.Values[i] = ec._ConstantParameter_constValue(ctx, field, obj)
		case "description":
			out.Values[i] = ec._ConstantParameter_description(ctx, field, obj)
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ConstantParameter_createdAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ConstantParameter_updatedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "game":
			out.Values[i] = ec._ConstantParameter_game(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameImplementors = []string{"Game"}

func (ec *executionContext) _Game(ctx context.Context, sel ast.SelectionSet, obj *models.Game) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Game")
		case "gameId":
			out.Values[i] = ec._Game_gameId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gameName":
			out.Values[i] = ec._Game_gameName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Game_description(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Game_active(ctx, field, obj)
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Game_createdAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Game_updatedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "competencies":
			out.Values[i] = ec._Game_competencies(ctx, field, obj)
		case "stages":
			out.Values[i] = ec._Game_stages(ctx, field, obj)
		case "gameMetrics":
			out.Values[i] = ec._Game_gameMetrics(ctx, field, obj)
		case "constantParameters":
			out.Values[i] = ec._Game_constantParameters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameMetricImplementors = []string{"GameMetric"}

func (ec *executionContext) _GameMetric(ctx context.Context, sel ast.SelectionSet, obj *models.GameMetric) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameMetricImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameMetric")
		case "metricId":
			out.Values[i] = ec._GameMetric_metricId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gameId":
			out.Values[i] = ec._GameMetric_gameId(ctx, field, obj)
		case "metricKey":
			out.Values[i] = ec._GameMetric_metricKey(ctx, field, obj)
		case "metricName":
			out.Values[i] = ec._GameMetric_metricName(ctx, field, obj)
		case "metricDescription":
			out.Values[i] = ec._GameMetric_metricDescription(ctx, field, obj)
		case "benchmark":
			out.Values[i] = ec._GameMetric_benchmark(ctx, field, obj)
		case "formula":
			out.Values[i] = ec._GameMetric_formula(ctx, field, obj)
		case "description":
			out.Values[i] = ec._GameMetric_description(ctx, field, obj)
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameMetric_createdAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameMetric_updatedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "parameters":
			out.Values[i] = ec._GameMetric_parameters(ctx, field, obj)
		case "game":
			out.Values[i] = ec._GameMetric_game(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameMetricParameterImplementors = []string{"GameMetricParameter"}

func (ec *executionContext) _GameMetricParameter(ctx context.Context, sel ast.SelectionSet, obj *models.GameMetricParameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameMetricParameterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameMetricParameter")
		case "paramId":
			out.Values[i] = ec._GameMetricParameter_paramId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "metricId":
			out.Values[i] = ec._GameMetricParameter_metricId(ctx, field, obj)
		case "paramKey":
			out.Values[i] = ec._GameMetricParameter_paramKey(ctx, field, obj)
		case "paramName":
			out.Values[i] = ec._GameMetricParameter_paramName(ctx, field, obj)
		case "paramDescription":
			out.Values[i] = ec._GameMetricParameter_paramDescription(ctx, field, obj)
		case "paramType":
			out.Values[i] = ec._GameMetricParameter_paramType(ctx, field, obj)
		case "isRequired":
			out.Values[i] = ec._GameMetricParameter_isRequired(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec._GameMetricParameter_defaultValue(ctx, field, obj)
		case "description":
			out.Values[i] = ec._GameMetricParameter_description(ctx, field, obj)
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameMetricParameter_createdAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameMetricParameter_updatedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metric":
			out.Values[i] = ec._GameMetricParameter_metric(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var globalMetricResultImplementors = []string{"GlobalMetricResult"}

func (ec *executionContext) _GlobalMetricResult(ctx context.Context, sel ast.SelectionSet, obj *model.GlobalMetricResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, globalMetricResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GlobalMetricResult")
		case "value":
			out.Values[i] = ec._GlobalMetricResult_value(ctx, field, obj)
		case "formula":
			out.Values[i] = ec._GlobalMetricResult_formula(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var globalMetricsImplementors = []string{"GlobalMetrics"}

func (ec *executionContext) _GlobalMetrics(ctx context.Context, sel ast.SelectionSet, obj *model.GlobalMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, globalMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GlobalMetrics")
		case "timeEfficiency":
			out.Values[i] = ec._GlobalMetrics_timeEfficiency(ctx, field, obj)
		case "autonomy":
			out.Values[i] = ec._GlobalMetrics_autonomy(ctx, field, obj)
		case "errorRecovery":
			out.Values[i] = ec._GlobalMetrics_errorRecovery(ctx, field, obj)
		case "stressPerformance":
			out.Values[i] = ec._GlobalMetrics_stressPerformance(ctx, field, obj)
		case "consistency":
			out.Values[i] = ec._GlobalMetrics_consistency(ctx, field, obj)
		case "adaptability":
			out.Values[i] = ec._GlobalMetrics_adaptability(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricParameterImplementors = []string{"MetricParameter"}

func (ec *executionContext) _MetricParameter(ctx context.Context, sel ast.SelectionSet, obj *model.MetricParameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricParameterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetricParameter")
		case "paramId":
			out.Values[i] = ec._MetricParameter_paramId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metricId":
			out.Values[i] = ec._MetricParameter_metricId(ctx, field, obj)
		case "paramKey":
			out.Values[i] = ec._MetricParameter_paramKey(ctx, field, obj)
		case "paramName":
			out.Values[i] = ec._MetricParameter_paramName(ctx, field, obj)
		case "paramDescription":
			out.Values[i] = ec._MetricParameter_paramDescription(ctx, field, obj)
		case "paramType":
			out.Values[i] = ec._MetricParameter_paramType(ctx, field, obj)
		case "isRequired":
			out.Values[i] = ec._MetricParameter_isRequired(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec._MetricParameter_defaultValue(ctx, field, obj)
		case "description":
			out.Values[i] = ec._MetricParameter_description(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MetricParameter_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._MetricParameter_updatedAt(ctx, field, obj)
		case "metric":
			out.Values[i] = ec._MetricParameter_metric(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricResultImplementors = []string{"MetricResult"}

func (ec *executionContext) _MetricResult(ctx context.Context, sel ast.SelectionSet, obj *model.MetricResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetricResult")
		case "kpiId":
			out.Values[i] = ec._MetricResult_kpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kpiName":
			out.Values[i] = ec._MetricResult_kpiName(ctx, field, obj)
		case "value":
			out.Values[i] = ec._MetricResult_value(ctx, field, obj)
		case "benchmark":
			out.Values[i] = ec._MetricResult_benchmark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGame(ctx, field)
			})
		case "updateGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGame(ctx, field)
			})
		case "deleteGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGame(ctx, field)
			})
		case "createCompetence":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompetence(ctx, field)
			})
		case "updateCompetence":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompetence(ctx, field)
			})
		case "deleteCompetence":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCompetence(ctx, field)
			})
		case "createCompetenceMetric":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompetenceMetric(ctx, field)
			})
		case "updateCompetenceMetric":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompetenceMetric(ctx, field)
			})
		case "deleteCompetenceMetric":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCompetenceMetric(ctx, field)
			})
		case "createMetricParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMetricParameter(ctx, field)
			})
		case "updateMetricParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMetricParameter(ctx, field)
			})
		case "deleteMetricParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMetricParameter(ctx, field)
			})
		case "createStage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createStage(ctx, field)
			})
		case "updateStage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateStage(ctx, field)
			})
		case "deleteStage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteStage(ctx, field)
			})
		case "assignMetricToStage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignMetricToStage(ctx, field)
			})
		case "removeMetricFromStage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeMetricFromStage(ctx, field)
			})
		case "createGameMetric":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGameMetric(ctx, field)
			})
		case "updateGameMetric":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameMetric(ctx, field)
			})
		case "deleteGameMetric":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGameMetric(ctx, field)
			})
		case "createGameMetricParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGameMetricParameter(ctx, field)
			})
		case "updateGameMetricParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameMetricParameter(ctx, field)
			})
		case "deleteGameMetricParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGameMetricParameter(ctx, field)
			})
		case "createConstantParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createConstantParameter(ctx, field)
			})
		case "updateConstantParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateConstantParameter(ctx, field)
			})
		case "deleteConstantParameter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteConstantParameter(ctx, field)
			})
		case "calculatePlayerPerformance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_calculatePlayerPerformance(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerPerformanceImplementors = []string{"PlayerPerformance"}

func (ec *executionContext) _PlayerPerformance(ctx context.Context, sel ast.SelectionSet, obj *model.PlayerPerformance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerPerformanceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerPerformance")
		case "playerId":
			out.Values[i] = ec._PlayerPerformance_playerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "playerName":
			out.Values[i] = ec._PlayerPerformance_playerName(ctx, field, obj)
		case "profileType":
			out.Values[i] = ec._PlayerPerformance_profileType(ctx, field, obj)
		case "gameDate":
			out.Values[i] = ec._PlayerPerformance_gameDate(ctx, field, obj)
		case "gameId":
			out.Values[i] = ec._PlayerPerformance_gameId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalScore":
			out.Values[i] = ec._PlayerPerformance_totalScore(ctx, field, obj)
		case "totalTimeTaken":
			out.Values[i] = ec._PlayerPerformance_totalTimeTaken(ctx, field, obj)
		case "competenceDetails":
			out.Values[i] = ec._PlayerPerformance_competenceDetails(ctx, field, obj)
		case "stagePerformance":
			out.Values[i] = ec._PlayerPerformance_stagePerformance(ctx, field, obj)
		case "globalMetrics":
			out.Values[i] = ec._PlayerPerformance_globalMetrics(ctx, field, obj)
		case "benchmarkComparison":
			out.Values[i] = ec._PlayerPerformance_benchmarkComparison(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getGames":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGames(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getGameById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGameById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCompetenciesByGame":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompetenciesByGame(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCompetenceById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompetenceById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMetricsByCompetence":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMetricsByCompetence(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMetricById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMetricById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getParametersByMetric":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getParametersByMetric(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getStagesByGame":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getStagesByGame(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getStageById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getStageById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMetricsByStage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMetricsByStage(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getGameMetricsByGame":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGameMetricsByGame(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getGameMetricById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGameMetricById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getParametersByGameMetric":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getParametersByGameMetric(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getConstantsByGame":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getConstantsByGame(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getConstantById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getConstantById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getGameConfiguration":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGameConfiguration(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getRequiredParametersForGame":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRequiredParametersForGame(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getRequiredParametersForStage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRequiredParametersForStage(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getGameFormulas":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGameFormulas(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBenchmarkData":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBenchmarkData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stageImplementors = []string{"Stage"}

func (ec *executionContext) _Stage(ctx context.Context, sel ast.SelectionSet, obj *models.Stage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Stage")
		case "stageId":
			out.Values[i] = ec._Stage_stageId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gameId":
			out.Values[i] = ec._Stage_gameId(ctx, field, obj)
		case "stageKey":
			out.Values[i] = ec._Stage_stageKey(ctx, field, obj)
		case "stageName":
			out.Values[i] = ec._Stage_stageName(ctx, field, obj)
		case "stageOrder":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Stage_stageOrder(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "benchmark":
			out.Values[i] = ec._Stage_benchmark(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Stage_description(ctx, field, obj)
		case "optimalTime":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Stage_optimalTime(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Stage_createdAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Stage_updatedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			out.Values[i] = ec._Stage_metrics(ctx, field, obj)
		case "game":
			out.Values[i] = ec._Stage_game(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stageMetricResultImplementors = []string{"StageMetricResult"}

func (ec *executionContext) _StageMetricResult(ctx context.Context, sel ast.SelectionSet, obj *model.StageMetricResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stageMetricResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StageMetricResult")
		case "kpiId":
			out.Values[i] = ec._StageMetricResult_kpiId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kpiName":
			out.Values[i] = ec._StageMetricResult_kpiName(ctx, field, obj)
		case "category":
			out.Values[i] = ec._StageMetricResult_category(ctx, field, obj)
		case "value":
			out.Values[i] = ec._StageMetricResult_value(ctx, field, obj)
		case "benchmark":
			out.Values[i] = ec._StageMetricResult_benchmark(ctx, field, obj)
		case "formula":
			out.Values[i] = ec._StageMetricResult_formula(ctx, field, obj)
		case "rawData":
			out.Values[i] = ec._StageMetricResult_rawData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stagePerformanceImplementors = []string{"StagePerformance"}

func (ec *executionContext) _StagePerformance(ctx context.Context, sel ast.SelectionSet, obj *model.StagePerformance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stagePerformanceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StagePerformance")
		case "stageId":
			out.Values[i] = ec._StagePerformance_stageId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "stageName":
			out.Values[i] = ec._StagePerformance_stageName(ctx, field, obj)
		case "metrics":
			out.Values[i] = ec._StagePerformance_metrics(ctx, field, obj)
		case "timeTaken":
			out.Values[i] = ec._StagePerformance_timeTaken(ctx, field, obj)
		case "optimalTime":
			out.Values[i] = ec._StagePerformance_optimalTime(ctx, field, obj)
		case "score":
			out.Values[i] = ec._StagePerformance_score(ctx, field, obj)
		case "benchmark":
			out.Values[i] = ec._StagePerformance_benchmark(ctx, field, obj)
		case "completionStatus":
			out.Values[i] = ec._StagePerformance_completionStatus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "gameCreated":
		return ec._Subscription_gameCreated(ctx, fields[0])
	case "gameUpdated":
		return ec._Subscription_gameUpdated(ctx, fields[0])
	case "gameDeleted":
		return ec._Subscription_gameDeleted(ctx, fields[0])
	case "competenceCreated":
		return ec._Subscription_competenceCreated(ctx, fields[0])
	case "competenceUpdated":
		return ec._Subscription_competenceUpdated(ctx, fields[0])
	case "competenceDeleted":
		return ec._Subscription_competenceDeleted(ctx, fields[0])
	case "competenceMetricCreated":
		return ec._Subscription_competenceMetricCreated(ctx, fields[0])
	case "competenceMetricUpdated":
		return ec._Subscription_competenceMetricUpdated(ctx, fields[0])
	case "competenceMetricDeleted":
		return ec._Subscription_competenceMetricDeleted(ctx, fields[0])
	case "metricParameterCreated":
		return ec._Subscription_metricParameterCreated(ctx, fields[0])
	case "metricParameterUpdated":
		return ec._Subscription_metricParameterUpdated(ctx, fields[0])
	case "metricParameterDeleted":
		return ec._Subscription_metricParameterDeleted(ctx, fields[0])
	case "stageCreated":
		return ec._Subscription_stageCreated(ctx, fields[0])
	case "stageUpdated":
		return ec._Subscription_stageUpdated(ctx, fields[0])
	case "stageDeleted":
		return ec._Subscription_stageDeleted(ctx, fields[0])
	case "metricAssignedToStage":
		return ec._Subscription_metricAssignedToStage(ctx, fields[0])
	case "metricRemovedFromStage":
		return ec._Subscription_metricRemovedFromStage(ctx, fields[0])
	case "gameMetricCreated":
		return ec._Subscription_gameMetricCreated(ctx, fields[0])
	case "gameMetricUpdated":
		return ec._Subscription_gameMetricUpdated(ctx, fields[0])
	case "gameMetricDeleted":
		return ec._Subscription_gameMetricDeleted(ctx, fields[0])
	case "gameMetricParameterCreated":
		return ec._Subscription_gameMetricParameterCreated(ctx, fields[0])
	case "gameMetricParameterUpdated":
		return ec._Subscription_gameMetricParameterUpdated(ctx, fields[0])
	case "gameMetricParameterDeleted":
		return ec._Subscription_gameMetricParameterDeleted(ctx, fields[0])
	case "constantParameterCreated":
		return ec._Subscription_constantParameterCreated(ctx, fields[0])
	case "constantParameterUpdated":
		return ec._Subscription_constantParameterUpdated(ctx, fields[0])
	case "constantParameterDeleted":
		return ec._Subscription_constantParameterDeleted(ctx, fields[0])
	case "playerPerformanceCalculated":
		return ec._Subscription_playerPerformanceCalculated(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCompetenceInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceInput(ctx context.Context, v any) (model.CompetenceInput, error) {
	res, err := ec.unmarshalInputCompetenceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompetenceMetricInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceMetricInput(ctx context.Context, v any) (model.CompetenceMetricInput, error) {
	res, err := ec.unmarshalInputCompetenceMetricInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompetenceMetricUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceMetricUpdateInput(ctx context.Context, v any) (model.CompetenceMetricUpdateInput, error) {
	res, err := ec.unmarshalInputCompetenceMetricUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompetenceUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceUpdateInput(ctx context.Context, v any) (model.CompetenceUpdateInput, error) {
	res, err := ec.unmarshalInputCompetenceUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstantParameterInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐConstantParameterInput(ctx context.Context, v any) (model.ConstantParameterInput, error) {
	res, err := ec.unmarshalInputConstantParameterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConstantParameterUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐConstantParameterUpdateInput(ctx context.Context, v any) (model.ConstantParameterUpdateInput, error) {
	res, err := ec.unmarshalInputConstantParameterUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNGameInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameInput(ctx context.Context, v any) (model.GameInput, error) {
	res, err := ec.unmarshalInputGameInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGameMetricInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricInput(ctx context.Context, v any) (model.GameMetricInput, error) {
	res, err := ec.unmarshalInputGameMetricInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGameMetricParameterInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricParameterInput(ctx context.Context, v any) (model.GameMetricParameterInput, error) {
	res, err := ec.unmarshalInputGameMetricParameterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGameMetricParameterUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricParameterUpdateInput(ctx context.Context, v any) (model.GameMetricParameterUpdateInput, error) {
	res, err := ec.unmarshalInputGameMetricParameterUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGameMetricUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameMetricUpdateInput(ctx context.Context, v any) (model.GameMetricUpdateInput, error) {
	res, err := ec.unmarshalInputGameMetricUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGameUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGameUpdateInput(ctx context.Context, v any) (model.GameUpdateInput, error) {
	res, err := ec.unmarshalInputGameUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v any) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMetricParameterInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameterInput(ctx context.Context, v any) (model.MetricParameterInput, error) {
	res, err := ec.unmarshalInputMetricParameterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMetricParameterUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameterUpdateInput(ctx context.Context, v any) (model.MetricParameterUpdateInput, error) {
	res, err := ec.unmarshalInputMetricParameterUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNParameterType2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx context.Context, v any) (models.ParameterType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ParameterType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParameterType2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx context.Context, sel ast.SelectionSet, v models.ParameterType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNParameterValueInput2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐParameterValueInputᚄ(ctx context.Context, v any) ([]*model.ParameterValueInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ParameterValueInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParameterValueInput2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐParameterValueInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNParameterValueInput2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐParameterValueInput(ctx context.Context, v any) (*model.ParameterValueInput, error) {
	res, err := ec.unmarshalInputParameterValueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPlayerPerformanceInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐPlayerPerformanceInput(ctx context.Context, v any) (model.PlayerPerformanceInput, error) {
	res, err := ec.unmarshalInputPlayerPerformanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStageInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageInput(ctx context.Context, v any) (model.StageInput, error) {
	res, err := ec.unmarshalInputStageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStageMetricInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageMetricInput(ctx context.Context, v any) (model.StageMetricInput, error) {
	res, err := ec.unmarshalInputStageMetricInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStageParametersInput2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageParametersInputᚄ(ctx context.Context, v any) ([]*model.StageParametersInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.StageParametersInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStageParametersInput2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageParametersInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNStageParametersInput2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageParametersInput(ctx context.Context, v any) (*model.StageParametersInput, error) {
	res, err := ec.unmarshalInputStageParametersInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStageUpdateInput2jobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageUpdateInput(ctx context.Context, v any) (model.StageUpdateInput, error) {
	res, err := ec.unmarshalInputStageUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOBenchmarkComparison2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐBenchmarkComparison(ctx context.Context, sel ast.SelectionSet, v *model.BenchmarkComparison) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BenchmarkComparison(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCompetence2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx context.Context, sel ast.SelectionSet, v models.Competence) graphql.Marshaler {
	return ec._Competence(ctx, sel, &v)
}

func (ec *executionContext) marshalOCompetence2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx context.Context, sel ast.SelectionSet, v []models.Competence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompetence2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompetence2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx context.Context, sel ast.SelectionSet, v []*models.Competence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompetence2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompetence2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetence(ctx context.Context, sel ast.SelectionSet, v *models.Competence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Competence(ctx, sel, v)
}

func (ec *executionContext) marshalOCompetenceDetail2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceDetail(ctx context.Context, sel ast.SelectionSet, v []*model.CompetenceDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompetenceDetail2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompetenceDetail2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐCompetenceDetail(ctx context.Context, sel ast.SelectionSet, v *model.CompetenceDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompetenceDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOCompetenceMetric2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx context.Context, sel ast.SelectionSet, v models.CompetenceMetric) graphql.Marshaler {
	return ec._CompetenceMetric(ctx, sel, &v)
}

func (ec *executionContext) marshalOCompetenceMetric2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx context.Context, sel ast.SelectionSet, v []models.CompetenceMetric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompetenceMetric2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompetenceMetric2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx context.Context, sel ast.SelectionSet, v []*models.CompetenceMetric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompetenceMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐCompetenceMetric(ctx context.Context, sel ast.SelectionSet, v *models.CompetenceMetric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompetenceMetric(ctx, sel, v)
}

func (ec *executionContext) marshalOConstantParameter2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx context.Context, sel ast.SelectionSet, v models.ConstantParameter) graphql.Marshaler {
	return ec._ConstantParameter(ctx, sel, &v)
}

func (ec *executionContext) marshalOConstantParameter2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx context.Context, sel ast.SelectionSet, v []models.ConstantParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConstantParameter2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConstantParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx context.Context, sel ast.SelectionSet, v []*models.ConstantParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConstantParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConstantParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐConstantParameter(ctx context.Context, sel ast.SelectionSet, v *models.ConstantParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConstantParameter(ctx, sel, v)
}

func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGame2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx context.Context, sel ast.SelectionSet, v models.Game) graphql.Marshaler {
	return ec._Game(ctx, sel, &v)
}

func (ec *executionContext) marshalOGame2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx context.Context, sel ast.SelectionSet, v []*models.Game) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGame2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGame(ctx context.Context, sel ast.SelectionSet, v *models.Game) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Game(ctx, sel, v)
}

func (ec *executionContext) marshalOGameMetric2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx context.Context, sel ast.SelectionSet, v models.GameMetric) graphql.Marshaler {
	return ec._GameMetric(ctx, sel, &v)
}

func (ec *executionContext) marshalOGameMetric2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx context.Context, sel ast.SelectionSet, v []models.GameMetric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGameMetric2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGameMetric2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx context.Context, sel ast.SelectionSet, v []*models.GameMetric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGameMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGameMetric2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetric(ctx context.Context, sel ast.SelectionSet, v *models.GameMetric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameMetric(ctx, sel, v)
}

func (ec *executionContext) marshalOGameMetricParameter2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx context.Context, sel ast.SelectionSet, v models.GameMetricParameter) graphql.Marshaler {
	return ec._GameMetricParameter(ctx, sel, &v)
}

func (ec *executionContext) marshalOGameMetricParameter2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx context.Context, sel ast.SelectionSet, v []models.GameMetricParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGameMetricParameter2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGameMetricParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx context.Context, sel ast.SelectionSet, v []*models.GameMetricParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGameMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGameMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐGameMetricParameter(ctx context.Context, sel ast.SelectionSet, v *models.GameMetricParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameMetricParameter(ctx, sel, v)
}

func (ec *executionContext) marshalOGlobalMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetricResult(ctx context.Context, sel ast.SelectionSet, v *model.GlobalMetricResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GlobalMetricResult(ctx, sel, v)
}

func (ec *executionContext) marshalOGlobalMetrics2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐGlobalMetrics(ctx context.Context, sel ast.SelectionSet, v *model.GlobalMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GlobalMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOJSON2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOMetricParameter2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx context.Context, sel ast.SelectionSet, v []*model.MetricParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMetricParameter2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricParameter(ctx context.Context, sel ast.SelectionSet, v *model.MetricParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetricParameter(ctx, sel, v)
}

func (ec *executionContext) marshalOMetricResult2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricResult(ctx context.Context, sel ast.SelectionSet, v []*model.MetricResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐMetricResult(ctx context.Context, sel ast.SelectionSet, v *model.MetricResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetricResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOParameterType2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx context.Context, v any) (models.ParameterType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ParameterType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParameterType2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx context.Context, sel ast.SelectionSet, v models.ParameterType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOParameterType2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx context.Context, v any) (*models.ParameterType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ParameterType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParameterType2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐParameterType(ctx context.Context, sel ast.SelectionSet, v *models.ParameterType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOPlayerPerformance2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐPlayerPerformance(ctx context.Context, sel ast.SelectionSet, v *model.PlayerPerformance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlayerPerformance(ctx, sel, v)
}

func (ec *executionContext) marshalOStage2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx context.Context, sel ast.SelectionSet, v models.Stage) graphql.Marshaler {
	return ec._Stage(ctx, sel, &v)
}

func (ec *executionContext) marshalOStage2ᚕjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx context.Context, sel ast.SelectionSet, v []models.Stage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStage2jobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStage2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx context.Context, sel ast.SelectionSet, v []*models.Stage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStage2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStage2ᚖjobfaiᚑanalyticsᚋinternalᚋmodelsᚐStage(ctx context.Context, sel ast.SelectionSet, v *models.Stage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Stage(ctx, sel, v)
}

func (ec *executionContext) marshalOStageMetricResult2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageMetricResult(ctx context.Context, sel ast.SelectionSet, v []*model.StageMetricResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStageMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageMetricResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStageMetricResult2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStageMetricResult(ctx context.Context, sel ast.SelectionSet, v *model.StageMetricResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StageMetricResult(ctx, sel, v)
}

func (ec *executionContext) marshalOStagePerformance2ᚕᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStagePerformance(ctx context.Context, sel ast.SelectionSet, v []*model.StagePerformance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStagePerformance2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStagePerformance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStagePerformance2ᚖjobfaiᚑanalyticsᚋinternalᚋgraphᚋmodelᚐStagePerformance(ctx context.Context, sel ast.SelectionSet, v *model.StagePerformance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StagePerformance(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
